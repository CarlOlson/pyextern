/* This file is generated, do not edit! */
package pandas;
@:native("pandas.Index") extern class Index {
	public function all(args:haxe.extern.Rest<Dynamic>):Dynamic;
	public function any(args:haxe.extern.Rest<Dynamic>):Dynamic;
	public function append(other:Dynamic):Dynamic;
	public function argmax(?axis:Dynamic = null):Void;
	public function argmin(?axis:Dynamic = null):Void;
	public function argsort(args:haxe.extern.Rest<Dynamic>):Void;
	public function asof(label:Dynamic):Void;
	public function asof_locs(where:Dynamic, mask:Dynamic):Void;
	public function astype(dtype:Dynamic):Void;
	public function copy(?names:Dynamic = null, ?name:Dynamic = null, ?dtype:Dynamic = null, ?deep:Dynamic = false):Dynamic;
	public function delete(loc:Dynamic):Dynamic;
	public function diff(args:haxe.extern.Rest<Dynamic>):Void;
	public function difference(other:Dynamic):Dynamic;
	public function drop(labels:Dynamic, ?errors:Dynamic):Dynamic;
	public function drop_duplicates(?keep:Dynamic):Dynamic;
	public function duplicated(?keep:Dynamic):Dynamic;
	public function equals(other:Dynamic):Void;
	public function factorize(?sort:Dynamic = false, ?na_sentinel:Dynamic):Dynamic;
	public function format(args:haxe.extern.Rest<Dynamic>):Void;
	public function get_duplicates():Void;
	public function get_indexer(target:Dynamic, ?method:Dynamic = null, ?limit:Dynamic = null, ?tolerance:Dynamic = null):Dynamic;
	public function get_indexer_for(args:haxe.extern.Rest<Dynamic>):Void;
	public function get_indexer_non_unique(target:Dynamic):Void;
	public function get_level_values(level:Dynamic):Dynamic;
	public function get_loc(key:Dynamic, ?method:Dynamic = null, ?tolerance:Dynamic = null):Dynamic;
	public function get_slice_bound(label:Dynamic, side:Dynamic, kind:Dynamic):Void;
	public function get_value(series:Dynamic, key:Dynamic):Void;
	public function get_values():Void;
	public function groupby(to_groupby:Dynamic):Dynamic;
	public function holds_integer():Void;
	public function identical(other:Dynamic):Void;
	public function insert(loc:Dynamic, item:Dynamic):Dynamic;
	public function intersection(other:Dynamic):Dynamic;
	public function is_(other:Dynamic):Dynamic;
	public function is_boolean():Void;
	public function is_categorical():Void;
	public function is_floating():Void;
	public function is_integer():Void;
	public function is_lexsorted_for_tuple(tup:Dynamic):Void;
	public function is_mixed():Void;
	public function is_numeric():Void;
	public function is_object():Void;
	public function is_type_compatible(kind:Dynamic):Void;
	public function isin(values:Dynamic, ?level:Dynamic = null):Dynamic;
	public function item():Void;
	public function join(other:Dynamic, ?how:Dynamic, ?level:Dynamic = null, ?return_indexers:Dynamic = false):Dynamic;
	public function map(mapper:Dynamic):Void;
	public function max():Void;
	public function min():Void;
	public function nunique(?dropna:Dynamic = true):Dynamic;
	public function order(?return_indexer:Dynamic = false, ?ascending:Dynamic = true):Void;
	public function putmask(mask:Dynamic, value:Dynamic):Void;
	public function ravel(?order:Dynamic):Void;
	public function reindex(target:Dynamic, ?method:Dynamic = null, ?level:Dynamic = null, ?limit:Dynamic = null, ?tolerance:Dynamic = null):Dynamic;
	public function rename(name:Dynamic, ?inplace:Dynamic = false):Dynamic;
	public function repeat(n:Dynamic):Void;
	public function searchsorted(key:Dynamic, ?side:Dynamic):Void;
	public function set_names(names:Dynamic, ?level:Dynamic = null, ?inplace:Dynamic = false):Dynamic;
	public function set_value(arr:Dynamic, key:Dynamic, value:Dynamic):Void;
	public function shift(?periods:Dynamic, ?freq:Dynamic = null):Dynamic;
	public function slice_indexer(?start:Dynamic = null, ?end:Dynamic = null, ?step:Dynamic = null, ?kind:Dynamic = null):Dynamic;
	public function slice_locs(?start:Dynamic = null, ?end:Dynamic = null, ?step:Dynamic = null, ?kind:Dynamic = null):Dynamic;
	public function sort(args:haxe.extern.Rest<Dynamic>):Void;
	public function sort_values(?return_indexer:Dynamic = false, ?ascending:Dynamic = true):Void;
	public function sortlevel(?level:Dynamic = null, ?ascending:Dynamic = true, ?sort_remaining:Dynamic = null):Dynamic;
	public function str():Void;
	public function summary(?name:Dynamic = null):Void;
	public function sym_diff(other:Dynamic, ?result_name:Dynamic = null):Dynamic;
	public function take(indices:Dynamic, ?axis:Dynamic, ?allow_fill:Dynamic = true, ?fill_value:Dynamic = null):Void;
	public function to_datetime(?dayfirst:Dynamic = false):Void;
	public function to_native_types(args:haxe.extern.Rest<Dynamic>):Void;
	public function to_series(args:haxe.extern.Rest<Dynamic>):Dynamic;
	public function tolist():Void;
	public function transpose():Void;
	public function union(other:Dynamic):Dynamic;
	public function unique():Dynamic;
	public function value_counts(?normalize:Dynamic = false, ?sort:Dynamic = true, ?ascending:Dynamic = false, ?bins:Dynamic = null, ?dropna:Dynamic = true):Dynamic;
	public function view(?cls:Dynamic = null):Void;
}