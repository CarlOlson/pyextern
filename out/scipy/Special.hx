/* This file is generated, do not edit! */
package scipy;
@:native("scipy.special") extern class Special {
	static public function agm(a:Dynamic, b:Dynamic):Void;
	static public function ai_zeros(nt:Dynamic):Dynamic;
	static public function airy(z:Dynamic):Dynamic;
	static public function airye(z:Dynamic):Dynamic;
	static public function assoc_laguerre(x:Dynamic, n:Dynamic, ?k:Dynamic):Void;
	static public function bdtr(k:Dynamic, n:Dynamic, p:Dynamic):Dynamic;
	static public function bdtrc(k:Dynamic, n:Dynamic, p:Dynamic):Dynamic;
	static public function bdtri(k:Dynamic, n:Dynamic, y:Dynamic):Void;
	static public function bdtrik(y:Dynamic, n:Dynamic, p:Dynamic):Void;
	static public function bdtrin(k:Dynamic, y:Dynamic, p:Dynamic):Void;
	static public function bei(x:Dynamic):Void;
	static public function bei_zeros(nt:Dynamic):Void;
	static public function beip(x:Dynamic):Void;
	static public function beip_zeros(nt:Dynamic):Void;
	static public function ber(x:Dynamic):Void;
	static public function ber_zeros(nt:Dynamic):Void;
	static public function bernoulli(n:Dynamic):Void;
	static public function berp(x:Dynamic):Void;
	static public function berp_zeros(nt:Dynamic):Void;
	static public function besselpoly(a:Dynamic, lmb:Dynamic, nu:Dynamic):Void;
	static public function beta(a:Dynamic, b:Dynamic):Void;
	static public function betainc(a:Dynamic, b:Dynamic, x:Dynamic):Void;
	static public function betaincinv(a:Dynamic, b:Dynamic, y:Dynamic):Void;
	static public function betaln(a:Dynamic, b:Dynamic):Void;
	static public function bi_zeros(nt:Dynamic):Dynamic;
	static public function binom(n:Dynamic, k:Dynamic):Void;
	static public function boxcox(x:Dynamic, lmbda:Dynamic):Dynamic;
	static public function boxcox1p(x:Dynamic, lmbda:Dynamic):Dynamic;
	static public function btdtr(a:Dynamic, b:Dynamic, x:Dynamic):Void;
	static public function btdtri(a:Dynamic, b:Dynamic, p:Dynamic):Void;
	static public function btdtria(p:Dynamic, b:Dynamic, x:Dynamic):Void;
	static public function btdtrib(a:Dynamic, p:Dynamic, x:Dynamic):Void;
	static public function cbrt(x:Dynamic):Void;
	static public function chdtr(v:Dynamic, x:Dynamic):Void;
	static public function chdtrc(v:Dynamic, x:Dynamic):Void;
	static public function chdtri(v:Dynamic, p:Dynamic):Void;
	static public function chdtriv(p:Dynamic, x:Dynamic):Void;
	static public function chebyc(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function chebys(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function chebyt(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function chebyu(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function chndtr(x:Dynamic, df:Dynamic, nc:Dynamic):Void;
	static public function chndtridf(x:Dynamic, p:Dynamic, nc:Dynamic):Void;
	static public function chndtrinc(x:Dynamic, df:Dynamic, p:Dynamic):Void;
	static public function chndtrix(p:Dynamic, df:Dynamic, nc:Dynamic):Void;
	static public function clpmn(m:Dynamic, n:Dynamic, z:Dynamic, ?type:Dynamic):Dynamic;
	static public function comb(N:Dynamic, k:Dynamic, ?exact:Dynamic = false, ?repetition:Dynamic = false):Dynamic;
	static public function cosdg(x:Dynamic):Void;
	static public function cosm1(x:Dynamic):Void;
	static public function cotdg(x:Dynamic):Void;
	static public function dawsn(x:Dynamic):Void;
	static public function digamma(z:Dynamic):Void;
	static public function diric(x:Dynamic, n:Dynamic):Dynamic;
	static public function ellip_harm(h2:Dynamic, k2:Dynamic, n:Dynamic, p:Dynamic, s:Dynamic, ?signm:Dynamic, ?signn:Dynamic):Dynamic;
	static public function ellip_harm_2(h2:Dynamic, k2:Dynamic, n:Dynamic, p:Dynamic, s:Dynamic):Dynamic;
	static public function ellip_normal(h2:Dynamic, k2:Dynamic, n:Dynamic, p:Dynamic):Dynamic;
	static public function ellipe(m:Dynamic):Dynamic;
	static public function ellipeinc(phi:Dynamic, m:Dynamic):Dynamic;
	static public function ellipj(u:Dynamic, m:Dynamic):Dynamic;
	static public function ellipk(m:Dynamic):Dynamic;
	static public function ellipkinc(phi:Dynamic, m:Dynamic):Dynamic;
	static public function ellipkm1(p:Dynamic):Dynamic;
	static public function entr(x:Dynamic):Dynamic;
	static public function erf(z:Dynamic):Dynamic;
	static public function erf_zeros(nt:Dynamic):Void;
	static public function erfc(x:Dynamic):Void;
	static public function erfcinv(y:Dynamic):Void;
	static public function erfcx(x:Dynamic):Void;
	static public function erfi(z:Dynamic):Void;
	static public function erfinv(y:Dynamic):Void;
	static public function errprint(?inflag:Dynamic = null):Dynamic;
	static public function euler(n:Dynamic):Void;
	static public function eval_chebyc(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_chebys(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_chebyt(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_chebyu(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_gegenbauer(n:Dynamic, alpha:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_genlaguerre(n:Dynamic, alpha:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_hermite(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_hermitenorm(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_jacobi(n:Dynamic, alpha:Dynamic, beta:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_laguerre(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_legendre(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_sh_chebyt(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_sh_chebyu(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_sh_jacobi(n:Dynamic, p:Dynamic, q:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function eval_sh_legendre(n:Dynamic, x:Dynamic, ?out:Dynamic = null):Void;
	static public function exp1(z:Dynamic):Void;
	static public function exp10(x:Dynamic):Void;
	static public function exp2(x:Dynamic):Void;
	static public function expi(x:Dynamic):Void;
	static public function expit(x:Dynamic):Dynamic;
	static public function expm1(x:Dynamic):Void;
	static public function expn(n:Dynamic, x:Dynamic):Void;
	static public function factorial(n:Dynamic, ?exact:Dynamic = false):Dynamic;
	static public function factorial2(n:Dynamic, ?exact:Dynamic = false):Dynamic;
	static public function factorialk(n:Dynamic, k:Dynamic, ?exact:Dynamic = true):Dynamic;
	static public function fdtr(dfn:Dynamic, dfd:Dynamic, x:Dynamic):Void;
	static public function fdtrc(dfn:Dynamic, dfd:Dynamic, x:Dynamic):Void;
	static public function fdtri(dfn:Dynamic, dfd:Dynamic, p:Dynamic):Void;
	static public function fresnel(z:Dynamic):Dynamic;
	static public function fresnel_zeros(nt:Dynamic):Void;
	static public function fresnelc_zeros(nt:Dynamic):Void;
	static public function fresnels_zeros(nt:Dynamic):Void;
	static public function gamma(z:Dynamic):Void;
	static public function gammainc(a:Dynamic, x:Dynamic):Void;
	static public function gammaincc(a:Dynamic, x:Dynamic):Void;
	static public function gammainccinv(a:Dynamic, y:Dynamic):Void;
	static public function gammaincinv(a:Dynamic, y:Dynamic):Void;
	static public function gammaln(z:Dynamic):Void;
	static public function gammasgn(x:Dynamic):Void;
	static public function gdtr(a:Dynamic, b:Dynamic, x:Dynamic):Void;
	static public function gdtrc(a:Dynamic, b:Dynamic, x:Dynamic):Void;
	static public function gdtria(p:Dynamic, b:Dynamic, x:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function gdtrib(a:Dynamic, p:Dynamic, x:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function gdtrix(a:Dynamic, b:Dynamic, p:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function gegenbauer(n:Dynamic, alpha:Dynamic, ?monic:Dynamic = false):Void;
	static public function genlaguerre(n:Dynamic, alpha:Dynamic, ?monic:Dynamic = false):Void;
	static public function h1vp(v:Dynamic, z:Dynamic, ?n:Dynamic):Void;
	static public function h2vp(v:Dynamic, z:Dynamic, ?n:Dynamic):Void;
	static public function hankel1(v:Dynamic, z:Dynamic):Void;
	static public function hankel1e(v:Dynamic, z:Dynamic):Void;
	static public function hankel2(v:Dynamic, z:Dynamic):Void;
	static public function hankel2e(v:Dynamic, z:Dynamic):Void;
	static public function hermite(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function hermitenorm(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function huber(delta:Dynamic, r:Dynamic):Dynamic;
	static public function hyp0f1(v:Dynamic, z:Dynamic):Dynamic;
	static public function hyp1f1(a:Dynamic, b:Dynamic, x:Dynamic):Void;
	static public function hyp1f2(a:Dynamic, b:Dynamic, c:Dynamic, x:Dynamic):Dynamic;
	static public function hyp2f0(a:Dynamic, b:Dynamic, x:Dynamic, type:Dynamic):Dynamic;
	static public function hyp2f1(a:Dynamic, b:Dynamic, c:Dynamic, z:Dynamic):Void;
	static public function hyp3f0(a:Dynamic, b:Dynamic, c:Dynamic, x:Dynamic):Dynamic;
	static public function hyperu(a:Dynamic, b:Dynamic, x:Dynamic):Void;
	static public function i0(x:Dynamic):Void;
	static public function i0e(x:Dynamic):Void;
	static public function i1(x:Dynamic):Void;
	static public function i1e(x:Dynamic):Void;
	static public function it2i0k0(x:Dynamic):Dynamic;
	static public function it2j0y0(x:Dynamic):Dynamic;
	static public function it2struve0(x:Dynamic):Dynamic;
	static public function itairy(x:Dynamic):Dynamic;
	static public function iti0k0(x:Dynamic):Dynamic;
	static public function itj0y0(x:Dynamic):Dynamic;
	static public function itmodstruve0(x:Dynamic):Dynamic;
	static public function itstruve0(x:Dynamic):Dynamic;
	static public function iv(v:Dynamic, z:Dynamic):Void;
	static public function ive(v:Dynamic, z:Dynamic):Void;
	static public function ivp(v:Dynamic, z:Dynamic, ?n:Dynamic):Void;
	static public function j0(x:Dynamic):Void;
	static public function j1(x:Dynamic):Void;
	static public function jacobi(n:Dynamic, alpha:Dynamic, beta:Dynamic, ?monic:Dynamic = false):Void;
	static public function jn_zeros(n:Dynamic, nt:Dynamic):Void;
	static public function jnjnp_zeros(nt:Dynamic):Dynamic;
	static public function jnp_zeros(n:Dynamic, nt:Dynamic):Void;
	static public function jnyn_zeros(n:Dynamic, nt:Dynamic):Void;
	static public function jv(v:Dynamic, z:Dynamic):Void;
	static public function jve(v:Dynamic, z:Dynamic):Void;
	static public function jvp(v:Dynamic, z:Dynamic, ?n:Dynamic):Void;
	static public function k0(x:Dynamic):Void;
	static public function k0e(x:Dynamic):Void;
	static public function k1(x:Dynamic):Void;
	static public function k1e(x:Dynamic):Void;
	static public function kei(x:Dynamic):Void;
	static public function kei_zeros(nt:Dynamic):Void;
	static public function keip(x:Dynamic):Void;
	static public function keip_zeros(nt:Dynamic):Void;
	static public function kelvin(x:Dynamic):Dynamic;
	static public function kelvin_zeros(nt:Dynamic):Void;
	static public function ker(x:Dynamic):Void;
	static public function ker_zeros(nt:Dynamic):Void;
	static public function kerp(x:Dynamic):Void;
	static public function kerp_zeros(nt:Dynamic):Void;
	static public function kl_div(x:Dynamic, y:Dynamic):Dynamic;
	static public function kn(n:Dynamic, x:Dynamic):Void;
	static public function kolmogi(p:Dynamic):Void;
	static public function kolmogorov(y:Dynamic):Void;
	static public function kv(v:Dynamic, z:Dynamic):Void;
	static public function kve(v:Dynamic, z:Dynamic):Void;
	static public function kvp(v:Dynamic, z:Dynamic, ?n:Dynamic):Void;
	static public function laguerre(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function lambertw(z:Dynamic, ?k:Dynamic, ?tol:Dynamic):Dynamic;
	static public function legendre(n:Dynamic, ?monic:Dynamic = false):Dynamic;
	static public function lmbda(v:Dynamic, x:Dynamic):Void;
	static public function log1p(x:Dynamic):Void;
	static public function log_ndtr(x:Dynamic):Void;
	static public function logit(x:Dynamic):Dynamic;
	static public function lpmn(m:Dynamic, n:Dynamic, z:Dynamic):Dynamic;
	static public function lpmv(m:Dynamic, v:Dynamic, x:Dynamic):Void;
	static public function lpn(n:Dynamic, z:Dynamic):Void;
	static public function lqmn(m:Dynamic, n:Dynamic, z:Dynamic):Void;
	static public function lqn(n:Dynamic, z:Dynamic):Void;
	static public function mathieu_a(m:Dynamic, q:Dynamic):Void;
	static public function mathieu_b(m:Dynamic, q:Dynamic):Void;
	static public function mathieu_cem(m:Dynamic, q:Dynamic, x:Dynamic):Dynamic;
	static public function mathieu_even_coef(m:Dynamic, q:Dynamic):Void;
	static public function mathieu_modcem1(m:Dynamic, q:Dynamic, x:Dynamic):Dynamic;
	static public function mathieu_modcem2(m:Dynamic, q:Dynamic, x:Dynamic):Dynamic;
	static public function mathieu_modsem1(m:Dynamic, q:Dynamic, x:Dynamic):Dynamic;
	static public function mathieu_modsem2(m:Dynamic, q:Dynamic, x:Dynamic):Dynamic;
	static public function mathieu_odd_coef(m:Dynamic, q:Dynamic):Void;
	static public function mathieu_sem(m:Dynamic, q:Dynamic, x:Dynamic):Dynamic;
	static public function modfresnelm(x:Dynamic):Dynamic;
	static public function modfresnelp(x:Dynamic):Dynamic;
	static public function modstruve(v:Dynamic, x:Dynamic):Void;
	static public function multigammaln(a:Dynamic, d:Dynamic):Dynamic;
	static public function nbdtr(k:Dynamic, n:Dynamic, p:Dynamic):Void;
	static public function nbdtrc(k:Dynamic, n:Dynamic, p:Dynamic):Void;
	static public function nbdtri(k:Dynamic, n:Dynamic, y:Dynamic):Void;
	static public function nbdtrik(y:Dynamic, n:Dynamic, p:Dynamic):Void;
	static public function nbdtrin(k:Dynamic, y:Dynamic, p:Dynamic):Void;
	static public function ncfdtr(dfn:Dynamic, dfd:Dynamic, nc:Dynamic, f:Dynamic):Dynamic;
	static public function ncfdtri(p:Dynamic, dfn:Dynamic, dfd:Dynamic, nc:Dynamic):Void;
	static public function ncfdtridfd(p:Dynamic, f:Dynamic, dfn:Dynamic, nc:Dynamic):Void;
	static public function ncfdtridfn(p:Dynamic, f:Dynamic, dfd:Dynamic, nc:Dynamic):Void;
	static public function ncfdtrinc(p:Dynamic, f:Dynamic, dfn:Dynamic, dfd:Dynamic):Void;
	static public function nctdtr(df:Dynamic, nc:Dynamic, t:Dynamic):Dynamic;
	static public function nctdtridf(p:Dynamic, nc:Dynamic, t:Dynamic):Void;
	static public function nctdtrinc(df:Dynamic, p:Dynamic, t:Dynamic):Void;
	static public function nctdtrit(df:Dynamic, nc:Dynamic, p:Dynamic):Void;
	static public function ndtr(x:Dynamic):Void;
	static public function ndtri(y:Dynamic):Void;
	static public function nrdtrimn(p:Dynamic, x:Dynamic, std:Dynamic):Dynamic;
	static public function nrdtrisd(p:Dynamic, x:Dynamic, mn:Dynamic):Dynamic;
	static public function obl_ang1(m:Dynamic, n:Dynamic, c:Dynamic, x:Dynamic):Dynamic;
	static public function obl_ang1_cv(m:Dynamic, n:Dynamic, c:Dynamic, cv:Dynamic, x:Dynamic):Dynamic;
	static public function obl_cv(m:Dynamic, n:Dynamic, c:Dynamic):Void;
	static public function obl_cv_seq(m:Dynamic, n:Dynamic, c:Dynamic):Void;
	static public function obl_rad1(m:Dynamic, n:Dynamic, c:Dynamic, x:Dynamic):Dynamic;
	static public function obl_rad1_cv(m:Dynamic, n:Dynamic, c:Dynamic, cv:Dynamic, x:Dynamic):Dynamic;
	static public function obl_rad2(m:Dynamic, n:Dynamic, c:Dynamic, x:Dynamic):Dynamic;
	static public function obl_rad2_cv(m:Dynamic, n:Dynamic, c:Dynamic, cv:Dynamic, x:Dynamic):Dynamic;
	static public function pbdn_seq(n:Dynamic, z:Dynamic):Void;
	static public function pbdv(v:Dynamic, x:Dynamic):Dynamic;
	static public function pbdv_seq(v:Dynamic, x:Dynamic):Void;
	static public function pbvv(v:Dynamic, x:Dynamic):Dynamic;
	static public function pbvv_seq(v:Dynamic, x:Dynamic):Void;
	static public function pbwa(a:Dynamic, x:Dynamic):Dynamic;
	static public function pdtr(k:Dynamic, m:Dynamic):Void;
	static public function pdtrc(k:Dynamic, m:Dynamic):Void;
	static public function pdtri(k:Dynamic, y:Dynamic):Void;
	static public function pdtrik(p:Dynamic, m:Dynamic):Void;
	static public function perm(N:Dynamic, k:Dynamic, ?exact:Dynamic = false):Dynamic;
	static public function poch(z:Dynamic, m:Dynamic):Void;
	static public function polygamma(n:Dynamic, x:Dynamic):Dynamic;
	static public function pro_ang1(m:Dynamic, n:Dynamic, c:Dynamic, x:Dynamic):Dynamic;
	static public function pro_ang1_cv(m:Dynamic, n:Dynamic, c:Dynamic, cv:Dynamic, x:Dynamic):Dynamic;
	static public function pro_cv(m:Dynamic, n:Dynamic, c:Dynamic):Void;
	static public function pro_cv_seq(m:Dynamic, n:Dynamic, c:Dynamic):Void;
	static public function pro_rad1(m:Dynamic, n:Dynamic, c:Dynamic, x:Dynamic):Dynamic;
	static public function pro_rad1_cv(m:Dynamic, n:Dynamic, c:Dynamic, cv:Dynamic, x:Dynamic):Dynamic;
	static public function pro_rad2(m:Dynamic, n:Dynamic, c:Dynamic, x:Dynamic):Dynamic;
	static public function pro_rad2_cv(m:Dynamic, n:Dynamic, c:Dynamic, cv:Dynamic, x:Dynamic):Dynamic;
	static public function pseudo_huber(delta:Dynamic, r:Dynamic):Dynamic;
	static public function psi(z:Dynamic):Void;
	static public function radian(d:Dynamic, m:Dynamic, s:Dynamic):Void;
	static public function rel_entr(x:Dynamic, y:Dynamic):Dynamic;
	static public function rgamma(z:Dynamic):Void;
	static public function riccati_jn(n:Dynamic, x:Dynamic):Void;
	static public function riccati_yn(n:Dynamic, x:Dynamic):Void;
	static public function round(x:Dynamic):Void;
	static public function sh_chebyt(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function sh_chebyu(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function sh_jacobi(n:Dynamic, p:Dynamic, q:Dynamic, ?monic:Dynamic = false):Void;
	static public function sh_legendre(n:Dynamic, ?monic:Dynamic = false):Void;
	static public function shichi(x:Dynamic):Dynamic;
	static public function sici(x:Dynamic):Dynamic;
	static public function sindg(x:Dynamic):Void;
	static public function smirnov(n:Dynamic, e:Dynamic):Void;
	static public function smirnovi(n:Dynamic, y:Dynamic):Void;
	static public function spence(x:Dynamic):Void;
	static public function sph_harm(m:Dynamic, n:Dynamic, theta:Dynamic, phi:Dynamic):Dynamic;
	static public function sph_in(n:Dynamic, z:Dynamic):Void;
	static public function sph_inkn(n:Dynamic, z:Dynamic):Void;
	static public function sph_jn(n:Dynamic, z:Dynamic):Void;
	static public function sph_jnyn(n:Dynamic, z:Dynamic):Void;
	static public function sph_kn(n:Dynamic, z:Dynamic):Void;
	static public function sph_yn(n:Dynamic, z:Dynamic):Void;
	static public function stdtr(df:Dynamic, t:Dynamic):Void;
	static public function stdtridf(p:Dynamic, t:Dynamic):Void;
	static public function stdtrit(df:Dynamic, p:Dynamic):Void;
	static public function struve(v:Dynamic, x:Dynamic):Void;
	static public function tandg(x:Dynamic):Void;
	static public function tklmbda(x:Dynamic, lmbda:Dynamic):Void;
	static public function wofz(z:Dynamic):Void;
	static public function xlog1py(x:Dynamic, y:Dynamic):Dynamic;
	static public function xlogy(x:Dynamic, y:Dynamic):Dynamic;
	static public function y0(x:Dynamic):Void;
	static public function y0_zeros(nt:Dynamic, ?complex:Dynamic):Void;
	static public function y1(x:Dynamic):Void;
	static public function y1_zeros(nt:Dynamic, ?complex:Dynamic):Void;
	static public function y1p_zeros(nt:Dynamic, ?complex:Dynamic):Void;
	static public function yn(n:Dynamic, x:Dynamic):Void;
	static public function yn_zeros(n:Dynamic, nt:Dynamic):Void;
	static public function ynp_zeros(n:Dynamic, nt:Dynamic):Void;
	static public function yv(v:Dynamic, z:Dynamic):Void;
	static public function yve(v:Dynamic, z:Dynamic):Void;
	static public function yvp(v:Dynamic, z:Dynamic, ?n:Dynamic):Void;
	static public function zeta(x:Dynamic, q:Dynamic):Void;
	static public function zetac(x:Dynamic):Void;
}