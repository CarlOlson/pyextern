/* This file is generated, do not edit! */
package scipy.stats;
@:native("scipy.stats.mstats") extern class Mstats {
	static public function argstoarray(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function betai(a:Dynamic, b:Dynamic, x:Dynamic):Dynamic;
	static public function chisquare(f_obs:Dynamic, ?f_exp:Dynamic = null, ?ddof:Dynamic, ?axis:Dynamic):Dynamic;
	static public function count_tied_groups(x:Dynamic, ?use_missing:Dynamic = false):Dynamic;
	static public function describe(a:Dynamic, ?axis:Dynamic, ?ddof:Dynamic):Dynamic;
	static public function f_oneway(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function f_value_wilks_lambda(ER:Dynamic, EF:Dynamic, dfnum:Dynamic, dfden:Dynamic, a:Dynamic, b:Dynamic):Void;
	static public function find_repeats(arr:Dynamic):Dynamic;
	static public function friedmanchisquare(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function kendalltau(x:Dynamic, y:Dynamic, ?use_ties:Dynamic = true, ?use_missing:Dynamic = false):Dynamic;
	static public function kendalltau_seasonal(x:Dynamic):Void;
	static public function kruskalwallis(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function ks_twosamp(data1:Dynamic, data2:Dynamic, ?alternative:Dynamic):Dynamic;
	static public function kurtosis(a:Dynamic, ?axis:Dynamic, ?fisher:Dynamic = true, ?bias:Dynamic = true):Dynamic;
	static public function kurtosistest(a:Dynamic, ?axis:Dynamic):Dynamic;
	static public function linregress(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function mannwhitneyu(x:Dynamic, y:Dynamic, ?use_continuity:Dynamic = true):Dynamic;
	static public function mode(a:Dynamic, ?axis:Dynamic):Dynamic;
	static public function moment(a:Dynamic, ?moment:Dynamic, ?axis:Dynamic):Dynamic;
	static public function mquantiles():Dynamic;
	static public function msign(x:Dynamic):Void;
	static public function normaltest(a:Dynamic, ?axis:Dynamic):Dynamic;
	static public function obrientransform(args:haxe.extern.Rest<Dynamic>):Void;
	static public function pearsonr(x:Dynamic, y:Dynamic):Dynamic;
	static public function plotting_positions(data:Dynamic, ?alpha:Dynamic, ?beta:Dynamic):Dynamic;
	static public function pointbiserialr(x:Dynamic, y:Dynamic):Dynamic;
	static public function rankdata(data:Dynamic, ?axis:Dynamic = null, ?use_missing:Dynamic = false):Void;
	static public function scoreatpercentile(data:Dynamic, per:Dynamic):Void;
	static public function sem(a:Dynamic, ?axis:Dynamic, ?ddof:Dynamic):Dynamic;
	static public function signaltonoise(args:haxe.extern.Rest<Dynamic>):Void;
	static public function skew(a:Dynamic, ?axis:Dynamic, ?bias:Dynamic = true):Dynamic;
	static public function skewtest(a:Dynamic, ?axis:Dynamic):Dynamic;
	static public function spearmanr(x:Dynamic, y:Dynamic, ?use_ties:Dynamic = true):Dynamic;
	static public function theilslopes(y:Dynamic, ?x:Dynamic = null, ?alpha:Dynamic):Dynamic;
	static public function threshold(a:Dynamic, ?threshmin:Dynamic = null, ?threshmax:Dynamic = null, ?newval:Dynamic):Dynamic;
	static public function tmax(a:Dynamic, upperlimit:Dynamic, ?axis:Dynamic, ?inclusive:Dynamic = true):Dynamic;
	static public function tmean(a:Dynamic, ?limits:Dynamic = null):Dynamic;
	static public function tmin(a:Dynamic, ?lowerlimit:Dynamic = null, ?axis:Dynamic, ?inclusive:Dynamic = true):Dynamic;
	static public function trim(a:Dynamic, ?limits:Dynamic = null):Void;
	static public function trima(a:Dynamic, ?limits:Dynamic = null):Void;
	static public function trimboth(data:Dynamic, ?proportiontocut:Dynamic):Void;
	static public function trimmed_stde(a:Dynamic):Dynamic;
	static public function trimr(a:Dynamic, ?limits:Dynamic = null):Void;
	static public function trimtail(data:Dynamic, ?proportiontocut:Dynamic, ?tail:Dynamic):Dynamic;
	static public function tsem(a:Dynamic, ?limits:Dynamic = null):Dynamic;
	static public function ttest_ind(a:Dynamic, b:Dynamic, ?axis:Dynamic):Dynamic;
	static public function ttest_onesamp(a:Dynamic, popmean:Dynamic, ?axis:Dynamic):Dynamic;
	static public function ttest_rel(a:Dynamic, b:Dynamic, ?axis:Dynamic):Dynamic;
	static public function tvar(a:Dynamic, ?limits:Dynamic = null):Dynamic;
	static public function variation(a:Dynamic, ?axis:Dynamic):Void;
	static public function winsorize(a:Dynamic, ?limits:Dynamic = null):Void;
	static public function zmap(scores:Dynamic, compare:Dynamic, ?axis:Dynamic, ?ddof:Dynamic):Dynamic;
	static public function zscore(a:Dynamic, ?axis:Dynamic, ?ddof:Dynamic):Dynamic;
}