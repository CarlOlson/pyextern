/* This file is generated, do not edit! */
package scipy;
@:native("scipy.stats") extern class Stats {
	static public function alpha(args:haxe.extern.Rest<Dynamic>):Void;
	static public function anderson(x:Dynamic, ?dist:Dynamic):Dynamic;
	static public function anderson_ksamp(samples:Dynamic, ?midrank:Dynamic = true):Dynamic;
	static public function anglit(args:haxe.extern.Rest<Dynamic>):Void;
	static public function ansari(x:Dynamic, y:Dynamic):Dynamic;
	static public function arcsine(args:haxe.extern.Rest<Dynamic>):Void;
	static public function bartlett(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function bayes_mvs(data:Dynamic, ?alpha:Dynamic):Dynamic;
	static public function bernoulli(args:haxe.extern.Rest<Dynamic>):Void;
	static public function beta(args:haxe.extern.Rest<Dynamic>):Void;
	static public function betaprime(args:haxe.extern.Rest<Dynamic>):Void;
	static public function binned_statistic(x:Dynamic, values:Dynamic, ?statistic:Dynamic, ?bins:Dynamic, ?range:Dynamic = null):Dynamic;
	static public function binned_statistic_2d(x:Dynamic, y:Dynamic, values:Dynamic, ?statistic:Dynamic, ?bins:Dynamic, ?range:Dynamic = null):Dynamic;
	static public function binned_statistic_dd(sample:Dynamic, values:Dynamic, ?statistic:Dynamic, ?bins:Dynamic, ?range:Dynamic = null):Dynamic;
	static public function binom(args:haxe.extern.Rest<Dynamic>):Void;
	static public function binom_test(x:Dynamic, ?n:Dynamic = null, ?p:Dynamic):Dynamic;
	static public function boltzmann(args:haxe.extern.Rest<Dynamic>):Void;
	static public function boxcox(x:Dynamic, ?lmbda:Dynamic = null, ?alpha:Dynamic = null):Dynamic;
	static public function boxcox_llf(lmb:Dynamic, data:Dynamic):Dynamic;
	static public function boxcox_normmax(x:Dynamic):Dynamic;
	static public function boxcox_normplot(x:Dynamic, la:Dynamic, lb:Dynamic, ?plot:Dynamic = null, ?N:Dynamic):Dynamic;
	static public function bradford(args:haxe.extern.Rest<Dynamic>):Void;
	static public function burr(args:haxe.extern.Rest<Dynamic>):Void;
	static public function cauchy(args:haxe.extern.Rest<Dynamic>):Void;
	static public function chi(args:haxe.extern.Rest<Dynamic>):Void;
	static public function chi2(args:haxe.extern.Rest<Dynamic>):Void;
	static public function chi2_contingency(observed:Dynamic, ?correction:Dynamic = true, ?lambda_:Dynamic = null):Dynamic;
	static public function chisquare(f_obs:Dynamic, ?f_exp:Dynamic = null, ?ddof:Dynamic, ?axis:Dynamic):Dynamic;
	static public function circmean(samples:Dynamic, ?high:Dynamic, ?low:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function circstd(samples:Dynamic, ?high:Dynamic, ?low:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function circvar(samples:Dynamic, ?high:Dynamic, ?low:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function combine_pvalues(pvalues:Dynamic, ?method:Dynamic, ?weights:Dynamic = null):Dynamic;
	static public function cosine(args:haxe.extern.Rest<Dynamic>):Void;
	static public function cumfreq(a:Dynamic, ?numbins:Dynamic, ?defaultreallimits:Dynamic = null, ?weights:Dynamic = null):Dynamic;
	static public function describe(a:Dynamic, ?axis:Dynamic, ?ddof:Dynamic):Dynamic;
	static public function dgamma(args:haxe.extern.Rest<Dynamic>):Void;
	static public function dirichlet(args:haxe.extern.Rest<Dynamic>):Void;
	static public function dlaplace(args:haxe.extern.Rest<Dynamic>):Void;
	static public function dweibull(args:haxe.extern.Rest<Dynamic>):Void;
	static public function entropy(pk:Dynamic, ?qk:Dynamic = null, ?base:Dynamic = null):Dynamic;
	static public function erlang(args:haxe.extern.Rest<Dynamic>):Void;
	static public function expon(args:haxe.extern.Rest<Dynamic>):Void;
	static public function exponnorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function exponpow(args:haxe.extern.Rest<Dynamic>):Void;
	static public function exponweib(args:haxe.extern.Rest<Dynamic>):Void;
	static public function f(args:haxe.extern.Rest<Dynamic>):Void;
	static public function f_oneway(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function fatiguelife(args:haxe.extern.Rest<Dynamic>):Void;
	static public function fisher_exact(table:Dynamic, ?alternative:Dynamic):Dynamic;
	static public function fisk(args:haxe.extern.Rest<Dynamic>):Void;
	static public function fligner(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function foldcauchy(args:haxe.extern.Rest<Dynamic>):Void;
	static public function foldnorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function frechet_l(args:haxe.extern.Rest<Dynamic>):Void;
	static public function frechet_r(args:haxe.extern.Rest<Dynamic>):Void;
	static public function friedmanchisquare(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function gamma(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gausshyper(args:haxe.extern.Rest<Dynamic>):Void;
	static public function genexpon(args:haxe.extern.Rest<Dynamic>):Void;
	static public function genextreme(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gengamma(args:haxe.extern.Rest<Dynamic>):Void;
	static public function genhalflogistic(args:haxe.extern.Rest<Dynamic>):Void;
	static public function genlogistic(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gennorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function genpareto(args:haxe.extern.Rest<Dynamic>):Void;
	static public function geom(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gilbrat(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gmean(a:Dynamic, ?axis:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function gompertz(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gumbel_l(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gumbel_r(args:haxe.extern.Rest<Dynamic>):Void;
	static public function halfcauchy(args:haxe.extern.Rest<Dynamic>):Void;
	static public function halfgennorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function halflogistic(args:haxe.extern.Rest<Dynamic>):Void;
	static public function halfnorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function histogram(a:Dynamic, ?numbins:Dynamic, ?defaultlimits:Dynamic = null, ?weights:Dynamic = null, ?printextras:Dynamic = false):Dynamic;
	static public function histogram2(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function hmean(a:Dynamic, ?axis:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function hypergeom(args:haxe.extern.Rest<Dynamic>):Void;
	static public function hypsecant(args:haxe.extern.Rest<Dynamic>):Void;
	static public function invgamma(args:haxe.extern.Rest<Dynamic>):Void;
	static public function invgauss(args:haxe.extern.Rest<Dynamic>):Void;
	static public function invweibull(args:haxe.extern.Rest<Dynamic>):Void;
	static public function invwishart(args:haxe.extern.Rest<Dynamic>):Void;
	static public function itemfreq(a:Dynamic):Dynamic;
	static public function johnsonsb(args:haxe.extern.Rest<Dynamic>):Void;
	static public function johnsonsu(args:haxe.extern.Rest<Dynamic>):Void;
	static public function kendalltau(x:Dynamic, y:Dynamic, ?initial_lexsort:Dynamic = true):Dynamic;
	static public function kruskal(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function ks_2samp(data1:Dynamic, data2:Dynamic):Dynamic;
	static public function ksone(args:haxe.extern.Rest<Dynamic>):Void;
	static public function kstat(data:Dynamic, ?n:Dynamic):Dynamic;
	static public function kstatvar(data:Dynamic, ?n:Dynamic):Dynamic;
	static public function kstest(rvs:Dynamic, cdf:Dynamic):Dynamic;
	static public function kstwobign(args:haxe.extern.Rest<Dynamic>):Void;
	static public function kurtosis(a:Dynamic, ?axis:Dynamic, ?fisher:Dynamic = true, ?bias:Dynamic = true):Dynamic;
	static public function kurtosistest(a:Dynamic, ?axis:Dynamic):Dynamic;
	static public function laplace(args:haxe.extern.Rest<Dynamic>):Void;
	static public function levene(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function linregress(x:Dynamic, ?y:Dynamic = null):Dynamic;
	static public function loggamma(args:haxe.extern.Rest<Dynamic>):Void;
	static public function logistic(args:haxe.extern.Rest<Dynamic>):Void;
	static public function loglaplace(args:haxe.extern.Rest<Dynamic>):Void;
	static public function lognorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function logser(args:haxe.extern.Rest<Dynamic>):Void;
	static public function lomax(args:haxe.extern.Rest<Dynamic>):Void;
	static public function mannwhitneyu(x:Dynamic, y:Dynamic, ?use_continuity:Dynamic = true):Dynamic;
	static public function maxwell(args:haxe.extern.Rest<Dynamic>):Void;
	static public function median_test(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function mielke(args:haxe.extern.Rest<Dynamic>):Void;
	static public function mode(a:Dynamic, ?axis:Dynamic):Dynamic;
	static public function moment(a:Dynamic, ?moment:Dynamic, ?axis:Dynamic):Dynamic;
	static public function mood(x:Dynamic, y:Dynamic, ?axis:Dynamic):Dynamic;
	static public function multivariate_normal(args:haxe.extern.Rest<Dynamic>):Void;
	static public function mvsdist(data:Dynamic):Dynamic;
	static public function nakagami(args:haxe.extern.Rest<Dynamic>):Void;
	static public function nanmean(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function nanmedian(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function nanstd(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function nbinom(args:haxe.extern.Rest<Dynamic>):Void;
	static public function ncf(args:haxe.extern.Rest<Dynamic>):Void;
	static public function nct(args:haxe.extern.Rest<Dynamic>):Void;
	static public function ncx2(args:haxe.extern.Rest<Dynamic>):Void;
	static public function norm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function normaltest(a:Dynamic, ?axis:Dynamic):Dynamic;
	static public function obrientransform(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function pareto(args:haxe.extern.Rest<Dynamic>):Void;
	static public function pearson3(args:haxe.extern.Rest<Dynamic>):Void;
	static public function pearsonr(x:Dynamic, y:Dynamic):Dynamic;
	static public function percentileofscore(a:Dynamic, score:Dynamic, ?kind:Dynamic):Dynamic;
	static public function planck(args:haxe.extern.Rest<Dynamic>):Void;
	static public function pointbiserialr(x:Dynamic, y:Dynamic):Dynamic;
	static public function poisson(args:haxe.extern.Rest<Dynamic>):Void;
	static public function power_divergence(f_obs:Dynamic, ?f_exp:Dynamic = null, ?ddof:Dynamic, ?axis:Dynamic, ?lambda_:Dynamic = null):Dynamic;
	static public function powerlaw(args:haxe.extern.Rest<Dynamic>):Void;
	static public function powerlognorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function powernorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function ppcc_max(x:Dynamic):Void;
	static public function ppcc_plot(x:Dynamic, a:Dynamic, b:Dynamic, ?dist:Dynamic, ?plot:Dynamic = null, ?N:Dynamic):Dynamic;
	static public function probplot(x:Dynamic):Dynamic;
	static public function randint(args:haxe.extern.Rest<Dynamic>):Void;
	static public function rankdata(a:Dynamic, ?method:Dynamic):Dynamic;
	static public function ranksums(x:Dynamic, y:Dynamic):Dynamic;
	static public function rayleigh(args:haxe.extern.Rest<Dynamic>):Void;
	static public function rdist(args:haxe.extern.Rest<Dynamic>):Void;
	static public function recipinvgauss(args:haxe.extern.Rest<Dynamic>):Void;
	static public function reciprocal(args:haxe.extern.Rest<Dynamic>):Void;
	static public function relfreq(a:Dynamic, ?numbins:Dynamic, ?defaultreallimits:Dynamic = null, ?weights:Dynamic = null):Dynamic;
	static public function rice(args:haxe.extern.Rest<Dynamic>):Void;
	static public function scoreatpercentile(a:Dynamic, per:Dynamic):Dynamic;
	static public function sem(a:Dynamic, ?axis:Dynamic, ?ddof:Dynamic):Dynamic;
	static public function semicircular(args:haxe.extern.Rest<Dynamic>):Void;
	static public function shapiro(x:Dynamic, ?a:Dynamic = null, ?reta:Dynamic = false):Dynamic;
	static public function sigmaclip(a:Dynamic, ?low:Dynamic, ?high:Dynamic):Dynamic;
	static public function signaltonoise(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function skellam(args:haxe.extern.Rest<Dynamic>):Void;
	static public function skew(a:Dynamic, ?axis:Dynamic, ?bias:Dynamic = true):Dynamic;
	static public function skewtest(a:Dynamic, ?axis:Dynamic):Dynamic;
	static public function spearmanr(a:Dynamic, ?b:Dynamic = null, ?axis:Dynamic):Dynamic;
	static public function t(args:haxe.extern.Rest<Dynamic>):Void;
	static public function theilslopes(y:Dynamic, ?x:Dynamic = null, ?alpha:Dynamic):Dynamic;
	static public function threshold(a:Dynamic, ?threshmin:Dynamic = null, ?threshmax:Dynamic = null, ?newval:Dynamic):Dynamic;
	static public function tiecorrect(rankvals:Dynamic):Dynamic;
	static public function tmax(a:Dynamic, ?upperlimit:Dynamic = null, ?axis:Dynamic, ?inclusive:Dynamic = true):Dynamic;
	static public function tmean(a:Dynamic, ?limits:Dynamic = null):Dynamic;
	static public function tmin(a:Dynamic, ?lowerlimit:Dynamic = null, ?axis:Dynamic, ?inclusive:Dynamic = true):Dynamic;
	static public function triang(args:haxe.extern.Rest<Dynamic>):Void;
	static public function trim1(a:Dynamic, proportiontocut:Dynamic, ?tail:Dynamic):Dynamic;
	static public function trimboth(a:Dynamic, proportiontocut:Dynamic, ?axis:Dynamic):Dynamic;
	static public function truncexpon(args:haxe.extern.Rest<Dynamic>):Void;
	static public function truncnorm(args:haxe.extern.Rest<Dynamic>):Void;
	static public function tsem(a:Dynamic, ?limits:Dynamic = null):Dynamic;
	static public function tstd(a:Dynamic, ?limits:Dynamic = null):Dynamic;
	static public function ttest_1samp(a:Dynamic, popmean:Dynamic, ?axis:Dynamic):Dynamic;
	static public function ttest_ind(a:Dynamic, b:Dynamic, ?axis:Dynamic, ?equal_var:Dynamic = true):Dynamic;
	static public function ttest_ind_from_stats(mean1:Dynamic, std1:Dynamic, nobs1:Dynamic, mean2:Dynamic, std2:Dynamic, nobs2:Dynamic, ?equal_var:Dynamic = true):Dynamic;
	static public function ttest_rel(a:Dynamic, b:Dynamic, ?axis:Dynamic):Dynamic;
	static public function tukeylambda(args:haxe.extern.Rest<Dynamic>):Void;
	static public function tvar(a:Dynamic, ?limits:Dynamic = null):Dynamic;
	static public function uniform(args:haxe.extern.Rest<Dynamic>):Void;
	static public function variation(a:Dynamic, ?axis:Dynamic):Void;
	static public function vonmises(args:haxe.extern.Rest<Dynamic>):Void;
	static public function wald(args:haxe.extern.Rest<Dynamic>):Void;
	static public function weibull_max(args:haxe.extern.Rest<Dynamic>):Void;
	static public function weibull_min(args:haxe.extern.Rest<Dynamic>):Void;
	static public function wilcoxon(x:Dynamic, ?y:Dynamic = null, ?zero_method:Dynamic, ?correction:Dynamic = false):Dynamic;
	static public function wishart(args:haxe.extern.Rest<Dynamic>):Void;
	static public function wrapcauchy(args:haxe.extern.Rest<Dynamic>):Void;
	static public function zipf(args:haxe.extern.Rest<Dynamic>):Void;
	static public function zmap(scores:Dynamic, compare:Dynamic, ?axis:Dynamic, ?ddof:Dynamic):Dynamic;
	static public function zscore(a:Dynamic, ?axis:Dynamic, ?ddof:Dynamic):Dynamic;
}