/* This file is generated, do not edit! */
package matplotlib;
@:native("matplotlib.pyplot") extern class Pyplot {
	static public function acorr(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function angle_spectrum(args:haxe.extern.Rest<Dynamic>):Void;
	static public function annotate(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function arrow(args:haxe.extern.Rest<Dynamic>):Void;
	static public function autoscale(?enable:Dynamic = true, ?axis:Dynamic, ?tight:Dynamic = null):Void;
	static public function autumn():Void;
	static public function axes(args:haxe.extern.Rest<Dynamic>):Void;
	static public function axhline(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function axhspan(args:haxe.extern.Rest<Dynamic>):Void;
	static public function axis(args:haxe.extern.Rest<Dynamic>):Void;
	static public function axvline(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function axvspan(args:haxe.extern.Rest<Dynamic>):Void;
	static public function bar(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function barbs(args:haxe.extern.Rest<Dynamic>):Void;
	static public function barh(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function bone():Void;
	static public function box(?on:Dynamic = null):Void;
	static public function boxplot(x:Dynamic, ?notch:Dynamic = false, ?sym:Dynamic = null, ?vert:Dynamic = true, ?whis:Dynamic, ?positions:Dynamic = null, ?widths:Dynamic = null, ?patch_artist:Dynamic = false, ?bootstrap:Dynamic = null, ?usermedians:Dynamic = null, ?conf_intervals:Dynamic = null, ?meanline:Dynamic = false, ?showmeans:Dynamic = false, ?showcaps:Dynamic = true, ?showbox:Dynamic = true, ?showfliers:Dynamic = true, ?boxprops:Dynamic = null, ?labels:Dynamic = null, ?flierprops:Dynamic = null, ?medianprops:Dynamic = null, ?meanprops:Dynamic = null, ?capprops:Dynamic = null, ?whiskerprops:Dynamic = null, ?manage_xticks:Dynamic = true, ?hold:Dynamic = null):Dynamic;
	static public function broken_barh(args:haxe.extern.Rest<Dynamic>):Void;
	static public function cla():Void;
	static public function clabel(args:haxe.extern.Rest<Dynamic>):Void;
	static public function clf():Void;
	static public function clim(?vmin:Dynamic = null, ?vmax:Dynamic = null):Void;
	static public function close(args:haxe.extern.Rest<Dynamic>):Void;
	static public function cohere(args:haxe.extern.Rest<Dynamic>):Void;
	static public function colorbar(args:haxe.extern.Rest<Dynamic>):Void;
	static public function colors():Void;
	static public function connect(s:Dynamic, func:Dynamic):Void;
	static public function contour(args:haxe.extern.Rest<Dynamic>):Void;
	static public function contourf(args:haxe.extern.Rest<Dynamic>):Void;
	static public function cool():Void;
	static public function copper():Void;
	static public function csd(args:haxe.extern.Rest<Dynamic>):Void;
	static public function delaxes(args:haxe.extern.Rest<Dynamic>):Void;
	static public function disconnect(cid:Dynamic):Void;
	static public function draw():Void;
	static public function errorbar(args:haxe.extern.Rest<Dynamic>):Void;
	static public function eventplot(args:haxe.extern.Rest<Dynamic>):Void;
	static public function figimage(args:haxe.extern.Rest<Dynamic>):Void;
	static public function figlegend(args:haxe.extern.Rest<Dynamic>):Void;
	static public function figtext(args:haxe.extern.Rest<Dynamic>):Void;
	static public function figure(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function fill(args:haxe.extern.Rest<Dynamic>):Void;
	static public function fill_between(args:haxe.extern.Rest<Dynamic>):Void;
	static public function fill_betweenx(args:haxe.extern.Rest<Dynamic>):Void;
	static public function findobj(?o:Dynamic = null, ?match:Dynamic = null, ?include_self:Dynamic = true):Void;
	static public function flag():Void;
	static public function gca(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gcf():Void;
	static public function gci():Void;
	static public function get_current_fig_manager():Void;
	static public function get_figlabels():Void;
	static public function get_fignums():Void;
	static public function get_plot_commands():Void;
	static public function ginput(args:haxe.extern.Rest<Dynamic>):Void;
	static public function gray():Void;
	static public function grid(args:haxe.extern.Rest<Dynamic>):Void;
	static public function hexbin(args:haxe.extern.Rest<Dynamic>):Void;
	static public function hist(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function hist2d(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function hlines(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function hold(?b:Dynamic = null):Void;
	static public function hot():Void;
	static public function hsv():Void;
	static public function imread(args:haxe.extern.Rest<Dynamic>):Void;
	static public function imsave(args:haxe.extern.Rest<Dynamic>):Void;
	static public function imshow(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function ioff():Void;
	static public function ion():Void;
	static public function ishold():Void;
	static public function isinteractive():Void;
	static public function jet():Void;
	static public function legend(args:haxe.extern.Rest<Dynamic>):Void;
	static public function locator_params(args:haxe.extern.Rest<Dynamic>):Void;
	static public function loglog(args:haxe.extern.Rest<Dynamic>):Void;
	static public function magnitude_spectrum(args:haxe.extern.Rest<Dynamic>):Void;
	static public function margins(args:haxe.extern.Rest<Dynamic>):Void;
	static public function matshow(args:haxe.extern.Rest<Dynamic>):Void;
	static public function minorticks_off():Void;
	static public function minorticks_on():Void;
	static public function over(args:haxe.extern.Rest<Dynamic>):Void;
	static public function pause(interval:Dynamic):Void;
	static public function pcolor(args:haxe.extern.Rest<Dynamic>):Void;
	static public function pcolormesh(args:haxe.extern.Rest<Dynamic>):Void;
	static public function phase_spectrum(args:haxe.extern.Rest<Dynamic>):Void;
	static public function pie(x:Dynamic, ?explode:Dynamic = null, ?labels:Dynamic = null, ?colors:Dynamic = null, ?autopct:Dynamic = null, ?pctdistance:Dynamic, ?shadow:Dynamic = false, ?labeldistance:Dynamic, ?startangle:Dynamic = null, ?radius:Dynamic = null, ?counterclock:Dynamic = true, ?wedgeprops:Dynamic = null, ?textprops:Dynamic = null, ?hold:Dynamic = null):Void;
	static public function pink():Void;
	static public function plot(args:haxe.extern.Rest<Dynamic>):Void;
	static public function plot_date(args:haxe.extern.Rest<Dynamic>):Void;
	static public function plotfile(fname:Dynamic):Void;
	static public function polar(args:haxe.extern.Rest<Dynamic>):Void;
	static public function prism():Void;
	static public function psd(args:haxe.extern.Rest<Dynamic>):Void;
	static public function quiver(args:haxe.extern.Rest<Dynamic>):Void;
	static public function quiverkey(args:haxe.extern.Rest<Dynamic>):Void;
	static public function rc(args:haxe.extern.Rest<Dynamic>):Void;
	static public function rc_context(?rc:Dynamic = null, ?fname:Dynamic = null):Void;
	static public function rcdefaults():Void;
	static public function rgrids(args:haxe.extern.Rest<Dynamic>):Void;
	static public function savefig(args:haxe.extern.Rest<Dynamic>):Void;
	static public function sca(ax:Dynamic):Void;
	static public function scatter(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function sci(im:Dynamic):Void;
	static public function semilogx(args:haxe.extern.Rest<Dynamic>):Void;
	static public function semilogy(args:haxe.extern.Rest<Dynamic>):Void;
	static public function set_cmap(cmap:Dynamic):Void;
	static public function setp(args:haxe.extern.Rest<Dynamic>):Void;
	static public function show(args:haxe.extern.Rest<Dynamic>):Void;
	static public function specgram(args:haxe.extern.Rest<Dynamic>):Void;
	static public function spectral():Void;
	static public function spring():Void;
	static public function spy(args:haxe.extern.Rest<Dynamic>):Void;
	static public function stackplot(args:haxe.extern.Rest<Dynamic>):Void;
	static public function stem(args:haxe.extern.Rest<Dynamic>):Void;
	static public function step(args:haxe.extern.Rest<Dynamic>):Void;
	static public function streamplot(x:Dynamic, y:Dynamic, u:Dynamic, v:Dynamic, ?density:Dynamic, ?linewidth:Dynamic = null, ?color:Dynamic = null, ?cmap:Dynamic = null, ?norm:Dynamic = null, ?arrowsize:Dynamic, ?arrowstyle:Dynamic, ?minlength:Dynamic, ?transform:Dynamic = null, ?zorder:Dynamic, ?hold:Dynamic = null):Void;
	static public function subplot(args:haxe.extern.Rest<Dynamic>):Void;
	static public function subplot2grid(args:haxe.extern.Rest<Dynamic>):Void;
	static public function subplot_tool(?targetfig:Dynamic = null):Void;
	static public function subplots(args:haxe.extern.Rest<Dynamic>):Void;
	static public function subplots_adjust(args:haxe.extern.Rest<Dynamic>):Void;
	static public function summer():Void;
	static public function suptitle(args:haxe.extern.Rest<Dynamic>):Void;
	static public function switch_backend(newbackend:Dynamic):Void;
	static public function table(args:haxe.extern.Rest<Dynamic>):Void;
	static public function text(args:haxe.extern.Rest<Dynamic>):Void;
	static public function thetagrids(args:haxe.extern.Rest<Dynamic>):Void;
	static public function tick_params(args:haxe.extern.Rest<Dynamic>):Void;
	static public function ticklabel_format(args:haxe.extern.Rest<Dynamic>):Void;
	static public function tight_layout(?pad:Dynamic, ?h_pad:Dynamic = null, ?w_pad:Dynamic = null, ?rect:Dynamic = null):Void;
	static public function title(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function tricontour(args:haxe.extern.Rest<Dynamic>):Void;
	static public function tricontourf(args:haxe.extern.Rest<Dynamic>):Void;
	static public function tripcolor(args:haxe.extern.Rest<Dynamic>):Void;
	static public function triplot(args:haxe.extern.Rest<Dynamic>):Void;
	static public function twinx(?ax:Dynamic = null):Void;
	static public function twiny(?ax:Dynamic = null):Void;
	static public function violinplot(dataset:Dynamic, ?positions:Dynamic = null, ?vert:Dynamic = true, ?widths:Dynamic, ?showmeans:Dynamic = false, ?showextrema:Dynamic = true, ?showmedians:Dynamic = false, ?points:Dynamic, ?bw_method:Dynamic = null, ?hold:Dynamic = null):Dynamic;
	static public function vlines(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function waitforbuttonpress(args:haxe.extern.Rest<Dynamic>):Void;
	static public function winter():Void;
	static public function xcorr(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function xkcd(?scale:Dynamic, ?length:Dynamic, ?randomness:Dynamic):Void;
	static public function xlabel(args:haxe.extern.Rest<Dynamic>):Void;
	static public function xlim(args:haxe.extern.Rest<Dynamic>):Void;
	static public function xscale(args:haxe.extern.Rest<Dynamic>):Void;
	static public function xticks(args:haxe.extern.Rest<Dynamic>):Void;
	static public function ylabel(args:haxe.extern.Rest<Dynamic>):Void;
	static public function ylim(args:haxe.extern.Rest<Dynamic>):Void;
	static public function yscale(args:haxe.extern.Rest<Dynamic>):Void;
	static public function yticks(args:haxe.extern.Rest<Dynamic>):Void;
	static public function plotting():Void;
	static public function colormaps():Void;
}