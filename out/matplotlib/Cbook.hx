/* This file is generated, do not edit! */
package matplotlib;
@:native("matplotlib.cbook") extern class Cbook {
	static public function align_iterators(args:haxe.extern.Rest<Dynamic>):Void;
	static public function allequal(seq:Dynamic):Void;
	static public function allpairs(x:Dynamic):Void;
	static public function alltrue(seq:Dynamic):Void;
	static public function boxplot_stats(X:Dynamic, ?whis:Dynamic, ?bootstrap:Dynamic = null, ?labels:Dynamic = null):Dynamic;
	static public function dedent(s:Dynamic):Void;
	static public function delete_masked_points(args:haxe.extern.Rest<Dynamic>):Void;
	static public function deprecated(since:Dynamic, ?message:Dynamic, ?name:Dynamic, ?alternative:Dynamic, ?pending:Dynamic = false, ?obj_type:Dynamic):Void;
	static public function dict_delall(d:Dynamic, keys:Dynamic):Void;
	static public function exception_to_str(?s:Dynamic = null):Void;
	static public function file_requires_unicode(x:Dynamic):Void;
	static public function finddir(o:Dynamic, match:Dynamic, ?_case:Dynamic = false):Void;
	static public function flatten(seq:Dynamic, ?scalarp:Dynamic):Void;
	static public function get_recursive_filelist(args:Dynamic):Void;
	static public function get_sample_data(fname:Dynamic, ?asfileobj:Dynamic = true):Void;
	static public function get_split_ind(seq:Dynamic, N:Dynamic):Void;
	static public function is_math_text(s:Dynamic):Void;
	static public function is_numlike(obj:Dynamic):Void;
	static public function is_scalar(obj:Dynamic):Void;
	static public function is_scalar_or_string(val:Dynamic):Void;
	static public function is_sequence_of_strings(obj:Dynamic):Void;
	static public function is_string_like(obj:Dynamic):Void;
	static public function is_writable_file_like(obj:Dynamic):Void;
	static public function issubclass_safe(x:Dynamic, klass:Dynamic):Void;
	static public function iterable(obj:Dynamic):Void;
	static public function listFiles(root:Dynamic, ?patterns:Dynamic, ?recurse:Dynamic, ?return_folders:Dynamic):Void;
	static public function mkdirs(newdir:Dynamic, ?mode:Dynamic):Void;
	public var mplDeprecation : Dynamic;
	static public function onetrue(seq:Dynamic):Void;
	static public function pieces(seq:Dynamic, ?num:Dynamic):Void;
	static public function popall(seq:Dynamic):Void;
	static public function print_cycles(objects:Dynamic, ?outstream:Dynamic, ?show_progress:Dynamic = false):Void;
	static public function recursive_remove(path:Dynamic):Void;
	static public function report_memory(?i:Dynamic):Void;
	static public function restrict_dict(d:Dynamic, keys:Dynamic):Void;
	static public function reverse_dict(d:Dynamic):Void;
	static public function safe_masked_invalid(x:Dynamic):Void;
	static public function safezip(args:haxe.extern.Rest<Dynamic>):Void;
	static public function simple_linear_interpolation(a:Dynamic, steps:Dynamic):Void;
	static public function soundex(name:Dynamic, ?len:Dynamic):Void;
	static public function strip_math(s:Dynamic):Void;
	static public function to_filehandle(fname:Dynamic, ?flag:Dynamic, ?return_opened:Dynamic = false):Void;
	static public function unicode_safe(s:Dynamic):Void;
	static public function unique(x:Dynamic):Void;
	static public function unmasked_index_ranges(mask:Dynamic, ?compressed:Dynamic = true):Void;
	static public function violin_stats(X:Dynamic, method:Dynamic, ?points:Dynamic):Dynamic;
	static public function warn_deprecated(since:Dynamic, ?message:Dynamic, ?name:Dynamic, ?alternative:Dynamic, ?pending:Dynamic = false, ?obj_type:Dynamic):Void;
	static public function wrap(prefix:Dynamic, text:Dynamic, cols:Dynamic):Void;
}