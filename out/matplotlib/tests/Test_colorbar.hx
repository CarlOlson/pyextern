/* This file is generated, do not edit! */
package matplotlib.tests;
@:pythonImport("matplotlib.tests.test_colorbar") extern class Test_colorbar {
	static public var __builtins__ : Dynamic;
	static public var __cached__ : Dynamic;
	static public var __doc__ : Dynamic;
	static public var __file__ : Dynamic;
	static public var __loader__ : Dynamic;
	static public var __name__ : Dynamic;
	static public var __package__ : Dynamic;
	static public var __spec__ : Dynamic;
	/**
		Produce 12 colorbars with variable length extensions for either
		uniform or proportional spacing.
		
		Helper function for test_colorbar_extension_length.
	**/
	static public function _colorbar_extension_length(spacing:Dynamic):Dynamic;
	/**
		Produce 4 colorbars with rectangular extensions for either uniform
		or proportional spacing.
		
		Helper function for test_colorbar_extension_shape.
	**/
	static public function _colorbar_extension_shape(spacing:Dynamic):Dynamic;
	/**
		Define a colormap and appropriate norms for each of the four
		possible settings of the extend keyword.
		
		Helper function for _colorbar_extension_shape and
		colorbar_extension_length.
	**/
	static public function _get_cmap_norms():Dynamic;
	/**
		Test `remove_from_figure` with the specified ``use_gridspec`` setting
	**/
	static public function _test_remove_from_figure(use_gridspec:Dynamic):Dynamic;
	static public var absolute_import : Dynamic;
	static public function cleanup(func:Dynamic):Dynamic;
	static public var division : Dynamic;
	/**
		Get a colormap instance, defaulting to rc values if *name* is None.
		
		Colormaps added with :func:`register_cmap` take precedence over
		built-in colormaps.
		
		If *name* is a :class:`matplotlib.colors.Colormap` instance, it will be
		returned.
		
		If *lut* is not None it must be an integer giving the number of
		entries desired in the lookup table, and *name* must be a
		standard mpl colormap name with a corresponding data dictionary
		in *datad*.
	**/
	static public function get_cmap(?name:Dynamic, ?lut:Dynamic):Dynamic;
	/**
		call signature::
		
		  image_comparison(baseline_images=['my_figure'], extensions=None)
		
		Compare images generated by the test with those specified in
		*baseline_images*, which must correspond else an
		ImageComparisonFailure exception will be raised.
		
		Keyword arguments:
		
		  *baseline_images*: list
		    A list of strings specifying the names of the images generated
		    by calls to :meth:`matplotlib.figure.savefig`.
		
		  *extensions*: [ None | list ]
		
		    If *None*, default to all supported extensions.
		
		    Otherwise, a list of extensions to test. For example ['png','pdf'].
		
		  *tol*: (default 13)
		    The RMS threshold above which the test is considered failed.
		
		  *freetype_version*: str or tuple
		    The expected freetype version or range of versions for this
		    test to pass.
		
		  *remove_text*: bool
		    Remove the title and tick text from the figure before
		    comparison.  This does not remove other, more deliberate,
		    text, such as legends and annotations.
		
		  *savefig_kwarg*: dict
		    Optional arguments that are passed to the savefig method.
	**/
	static public function image_comparison(?baseline_images:Dynamic, ?extensions:Dynamic, ?tol:Dynamic, ?freetype_version:Dynamic, ?remove_text:Dynamic, ?savefig_kwarg:Dynamic):Dynamic;
	static public var print_function : Dynamic;
	static public var rcParams : Dynamic;
	static public function test_colorbarbase():Dynamic;
	/**
		Make sure that `remove_from_figure` removes a colorbar that was created
		without modifying the gridspec
	**/
	static public function test_remove_from_figure_no_gridspec():Dynamic;
	/**
		Make sure that `remove_from_figure` removes the colorbar and properly
		restores the gridspec
	**/
	static public function test_remove_from_figure_with_gridspec():Dynamic;
	static public var unicode_literals : Dynamic;
}