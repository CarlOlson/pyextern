/* This file is generated, do not edit! */
package matplotlib.testing;
@:pythonImport("matplotlib.testing.decorators") extern class Decorators {
	static public var __builtins__ : Dynamic;
	static public var __cached__ : Dynamic;
	static public var __doc__ : Dynamic;
	static public var __file__ : Dynamic;
	static public var __loader__ : Dynamic;
	static public var __name__ : Dynamic;
	static public var __package__ : Dynamic;
	static public var __spec__ : Dynamic;
	static public function _do_cleanup(original_units_registry:Dynamic):Dynamic;
	/**
		Compute the baseline and result image directories for testing *func*.
		Create the result directory if it doesn't exist.
	**/
	static public function _image_directories(func:Dynamic):Dynamic;
	static public var absolute_import : Dynamic;
	static public function check_freetype_version(ver:Dynamic):Dynamic;
	static public function cleanup(func:Dynamic):Dynamic;
	/**
		Returns the list of file formats that compare_images can compare
		on this system.
	**/
	static public function comparable_formats():Dynamic;
	/**
		Compare two "image" files checking differences within a tolerance.
		
		The two given filenames may point to files which are convertible to
		PNG via the `.converter` dictionary. The underlying RMS is calculated
		with the `.calculate_rms` function.
		
		Parameters
		----------
		expected : str
		    The filename of the expected image.
		actual :str
		    The filename of the actual image.
		tol : float
		    The tolerance (a color value difference, where 255 is the
		    maximal difference).  The test fails if the average pixel
		    difference is greater than this value.
		in_decorator : bool
		    If called from image_comparison decorator, this should be
		    True. (default=False)
		
		Example
		-------
		img1 = "./baseline/plot.png"
		img2 = "./output/plot.png"
		compare_images( img1, img2, 0.001 ):
	**/
	static public function compare_images(expected:Dynamic, actual:Dynamic, tol:Dynamic, ?in_decorator:Dynamic):Dynamic;
	static public var division : Dynamic;
	/**
		call signature::
		
		  image_comparison(baseline_images=['my_figure'], extensions=None)
		
		Compare images generated by the test with those specified in
		*baseline_images*, which must correspond else an
		ImageComparisonFailure exception will be raised.
		
		Keyword arguments:
		
		  *baseline_images*: list
		    A list of strings specifying the names of the images generated
		    by calls to :meth:`matplotlib.figure.savefig`.
		
		  *extensions*: [ None | list ]
		
		    If *None*, default to all supported extensions.
		
		    Otherwise, a list of extensions to test. For example ['png','pdf'].
		
		  *tol*: (default 13)
		    The RMS threshold above which the test is considered failed.
		
		  *freetype_version*: str or tuple
		    The expected freetype version or range of versions for this
		    test to pass.
		
		  *remove_text*: bool
		    Remove the title and tick text from the figure before
		    comparison.  This does not remove other, more deliberate,
		    text, such as legends and annotations.
		
		  *savefig_kwarg*: dict
		    Optional arguments that are passed to the savefig method.
	**/
	static public function image_comparison(?baseline_images:Dynamic, ?extensions:Dynamic, ?tol:Dynamic, ?freetype_version:Dynamic, ?remove_text:Dynamic, ?savefig_kwarg:Dynamic):Dynamic;
	/**
		Assume a will fail if *fail_condition* is True. *fail_condition*
		may also be False or the string 'indeterminate'.
		
		*msg* is the error message displayed for the test.
		
		If *known_exception_class* is not None, the failure is only known
		if the exception is an instance of this class. (Default = None)
	**/
	static public function knownfailureif(fail_condition:Dynamic, ?msg:Dynamic, ?known_exception_class:Dynamic):Dynamic;
	/**
		Make a new filename by inserting `purpose` before the file's
		extension.
	**/
	static public function make_test_filename(fname:Dynamic, purpose:Dynamic):Dynamic;
	static public var print_function : Dynamic;
	static public var unicode_literals : Dynamic;
}