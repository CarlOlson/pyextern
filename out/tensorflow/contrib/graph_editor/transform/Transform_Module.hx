/* This file is generated, do not edit! */
package tensorflow.contrib.graph_editor.transform;
@:pythonImport("tensorflow.contrib.graph_editor.transform") extern class Transform_Module {
	static public var __builtins__ : Dynamic;
	static public var __cached__ : Dynamic;
	static public var __doc__ : Dynamic;
	static public var __file__ : Dynamic;
	static public var __loader__ : Dynamic;
	static public var __name__ : Dynamic;
	static public var __package__ : Dynamic;
	static public var __spec__ : Dynamic;
	static public var absolute_import : Dynamic;
	/**
		Add the transformed elem to the (renamed) collections of elem.
		
		Args:
		  info: Transform._Info instance.
		  elem: the original element (tf.Tensor or tf.Operation)
		  elem_: the transformed element
	**/
	static public function assign_renamed_collections_handler(info:Dynamic, elem:Dynamic, elem_:Dynamic):Dynamic;
	/**
		Copy a subgraph.
		
		Args:
		  sgv: the source subgraph-view. This argument is converted to a subgraph
		    using the same rules than the function subgraph.make_view.
		  dst_graph: the destination graph.
		  dst_scope: the destination scope.
		  src_scope: the source scope.
		Returns:
		  the subgraph view of the copied subgraph.
		Raises:
		  TypeError: if dst_graph is not a tf.Graph.
		  StandardError: if sgv cannot be converted to a SubGraphView using
		    the same rules than the function subgraph.make_view.
	**/
	static public function copy(sgv:Dynamic, ?dst_graph:Dynamic, ?dst_scope:Dynamic, ?src_scope:Dynamic):Dynamic;
	/**
		Copy a tf.Operation.
		
		Args:
		  info: Transform._Info instance.
		  op: the tf.Operation to be copied.
		Returns:
		  A copy of op.
	**/
	static public function copy_op_handler(info:Dynamic, op:Dynamic):Dynamic;
	/**
		Deep copy operation on arbitrary Python objects.
		
		See the module's __doc__ string for more info.
	**/
	static public function deepcopy(x:Dynamic, ?memo:Dynamic, ?_nil:Dynamic):Dynamic;
	static public var division : Dynamic;
	/**
		Return an iterator over the (key, value) pairs of a dictionary.
	**/
	static public function iteritems(d:Dynamic, ?kw:python.KwArgs<Dynamic>):Dynamic;
	/**
		Transform a tensor into itself (identity) if possible.
		
		This handler transform a tensor into itself if the source and destination
		graph are the same. Otherwise it will create a placeholder.
		This handler is typically used to transform a hidden input tensors.
		
		Args:
		  info: Transform._Info instance.
		  t: tensor whose input must be transformed into a place holder.
		Returns:
		  The tensor generated by the newly created place holder.
	**/
	static public function keep_same_tensor_if_possible_handler(info:Dynamic, t:Dynamic):Dynamic;
	static public var print_function : Dynamic;
	/**
		Transform a op in-place - experimental!
		
		Transform an operation in place. It reconnects the inputs if they have been
		modified. if detach_outputs is True, the outputs of op are also detached.
		
		Args:
		  info: Transform._Info instance.
		  op: the op to transform in place.
		  detach_outputs: if True, the outputs of op are detached, ready for the user
		    to add more operation.
		Returns:
		  the transformed op.
	**/
	static public function transform_op_in_place(info:Dynamic, op:Dynamic, ?detach_outputs:Dynamic):Dynamic;
	/**
		Transform an optional op only if it is inside the subgraph.
		
		This handler is typically use to handle original op: it is fine to keep them
		if they are inside the subgraph, otherwise they are just ignored.
		
		Args:
		  info: Transform._Info instance.
		  op: the optional op to transform (or ignore).
		Returns:
		  the transformed op or None if ignored.
	**/
	static public function transform_optional_op_if_inside_handler(info:Dynamic, op:Dynamic):Dynamic;
	/**
		Transform a tensor into a placeholder tensor.
		
		This handler is typically used to transform a subgraph input tensor into a
		placeholder.
		
		Args:
		  info: Transform._Info instance.
		  t: tensor whose input must be transformed into a place holder.
		Returns:
		  The tensor generated by the newly created place holder.
	**/
	static public function transform_tensor_into_placeholder_handler(info:Dynamic, t:Dynamic):Dynamic;
}