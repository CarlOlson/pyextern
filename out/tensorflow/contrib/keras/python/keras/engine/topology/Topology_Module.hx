/* This file is generated, do not edit! */
package tensorflow.contrib.keras.python.keras.engine.topology;
@:pythonImport("tensorflow.contrib.keras.python.keras.engine.topology") extern class Topology_Module {
	/**
		`Input()` is used to instantiate a Keras tensor.
		
		A Keras tensor is a tensor object from the underlying backend
		(Theano or TensorFlow), which we augment with certain
		attributes that allow us to build a Keras model
		just by knowing the inputs and outputs of the model.
		
		For instance, if a, b and c and Keras tensors,
		it becomes possible to do:
		`model = Model(input=[a, b], output=c)`
		
		The added Keras attribute is:
		    `_keras_history`: Last layer applied to the tensor.
		        the entire layer graph is retrievable from that layer,
		        recursively.
		
		Arguments:
		    shape: A shape tuple (integer), not including the batch size.
		        For instance, `shape=(32,)` indicates that the expected input
		        will be batches of 32-dimensional vectors.
		    batch_shape: A shape tuple (integer), including the batch size.
		        For instance, `batch_shape=(10, 32)` indicates that
		        the expected input will be batches of 10 32-dimensional vectors.
		        `batch_shape=(None, 32)` indicates batches of an arbitrary number
		        of 32-dimensional vectors.
		    name: An optional name string for the layer.
		        Should be unique in a model (do not reuse the same name twice).
		        It will be autogenerated if it isn't provided.
		    dtype: The data type expected by the input, as a string
		        (`float32`, `float64`, `int32`...)
		    sparse: A boolean specifying whether the placeholder
		        to be created is sparse.
		    tensor: Optional existing tensor to wrap into the `Input` layer.
		        If set, the layer will not create a placeholder tensor.
		
		Returns:
		    A tensor.
		
		Example:
		
		    ```python
		    # this is a logistic regression in Keras
		    x = Input(shape=(32,))
		    y = Dense(16, activation='softmax')(x)
		    model = Model(x, y)
		    ```
	**/
	static public function Input(?shape:Dynamic, ?batch_shape:Dynamic, ?name:Dynamic, ?dtype:Dynamic, ?sparse:Dynamic, ?tensor:Dynamic):Dynamic;
	static public var __builtins__ : Dynamic;
	static public var __cached__ : Dynamic;
	static public var __doc__ : Dynamic;
	static public var __file__ : Dynamic;
	static public var __loader__ : Dynamic;
	static public var __name__ : Dynamic;
	static public var __package__ : Dynamic;
	static public var __spec__ : Dynamic;
	/**
		Collects the output shape(s) of a list of Keras tensors.
		
		Arguments:
		    input_tensors: list of input tensors (or single input tensor).
		
		Returns:
		    List of shape tuples (or single tuple), one tuple per input.
	**/
	static public function _collect_input_shape(input_tensors:Dynamic):Dynamic;
	/**
		Retrieves the output mask(s) of the previous node.
		
		Arguments:
		    input_tensors: A tensor or list of tensors.
		
		Returns:
		    A mask tensor or list of mask tensors.
	**/
	static public function _collect_previous_mask(input_tensors:Dynamic):Dynamic;
	static public function _is_all_none(iterable_or_element:Dynamic):Dynamic;
	static public function _object_list_uid(object_list:Dynamic):Dynamic;
	/**
		Normalizes a list/tensor into a list.
		
		If a tensor is passed, we return
		a list of size 1 containing the tensor.
		
		Arguments:
		    x: target object to be normalized.
		
		Returns:
		    A list.
	**/
	static public function _to_list(x:Dynamic):Dynamic;
	static public function _to_snake_case(name:Dynamic):Dynamic;
	static public var absolute_import : Dynamic;
	/**
		Produces a prompt asking about overwriting a file.
		
		Arguments:
		    filepath: the path to the file to be overwritten.
		
		Returns:
		    True if we can proceed with overwrite, False otherwise.
	**/
	static public function ask_to_proceed_with_overwrite(filepath:Dynamic):Dynamic;
	static public var division : Dynamic;
	/**
		Returns the list of input tensors necessary to compute `tensor`.
		
		Output will always be a list of tensors
		(potentially with 1 element).
		
		Arguments:
		    tensor: The tensor to start from.
		    layer: Origin layer of the tensor. Will be
		        determined via tensor._keras_history if not provided.
		    node_index: Origin node index of the tensor.
		
		Returns:
		    List of input tensors.
	**/
	static public function get_source_inputs(tensor:Dynamic, ?layer:Dynamic, ?node_index:Dynamic):Dynamic;
	static public var h5py : Dynamic;
	/**
		Implements topological (order-based) weight loading.
		
		Arguments:
		    f: A pointer to a HDF5 group.
		    layers: a list of target layers.
		
		Raises:
		    ValueError: in case of mismatch between provided layers
		        and weights file.
	**/
	static public function load_weights_from_hdf5_group(f:Dynamic, layers:Dynamic):Dynamic;
	/**
		Implements name-based weight loading.
		
		(instead of topological weight loading).
		
		Layers that have no matching name are skipped.
		
		Arguments:
		    f: A pointer to a HDF5 group.
		    layers: a list of target layers.
		
		Raises:
		    ValueError: in case of mismatch between provided layers
		        and weights file.
	**/
	static public function load_weights_from_hdf5_group_by_name(f:Dynamic, layers:Dynamic):Dynamic;
	/**
		Converts layers weights from Keras 1 format to Keras 2.
		
		Arguments:
		    layer: Layer instance.
		    weights: List of weights values (Numpy arrays).
		    original_keras_version: Keras version for the weights, as a string.
		    original_backend: Keras backend the weights were trained with,
		        as a string.
		
		Returns:
		    A list of weights values (Numpy arrays).
	**/
	static public function preprocess_weights_for_loading(layer:Dynamic, weights:Dynamic, ?original_keras_version:Dynamic, ?original_backend:Dynamic):Dynamic;
	static public var print_function : Dynamic;
	/**
		Prints a summary of a model.
		
		Arguments:
		    model: Keras model instance.
		    line_length: total length of printed lines
		    positions: relative or absolute positions of log elements in each line.
		        If not provided, defaults to `[.33, .55, .67, 1.]`.
	**/
	static public function print_layer_summary(model:Dynamic, ?line_length:Dynamic, ?positions:Dynamic):Dynamic;
	static public function save_weights_to_hdf5_group(f:Dynamic, layers:Dynamic):Dynamic;
	static public var yaml : Dynamic;
}