/* This file is generated, do not edit! */
@:native("numpy") extern class Numpy {
	static public function absolute(x:Dynamic, out:Dynamic):Dynamic;
	static public function add(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function all(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function allclose(a:Dynamic, b:Dynamic, ?rtol:Dynamic, ?atol:Dynamic, ?equal_nan:Dynamic = false):Dynamic;
	static public function alterdot():Void;
	static public function amax(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function amin(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function angle(z:Dynamic, ?deg:Dynamic):Dynamic;
	static public function any(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function append(arr:Dynamic, values:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function apply_along_axis(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function apply_over_axes(func:Dynamic, a:Dynamic, axes:Dynamic):Dynamic;
	static public function arange(start:Dynamic, stop:Dynamic, step:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function arccos(x:Dynamic, out:Dynamic):Dynamic;
	static public function arccosh(x:Dynamic, out:Dynamic):Dynamic;
	static public function arcsin(x:Dynamic, out:Dynamic):Dynamic;
	static public function arcsinh(x:Dynamic, out:Dynamic):Dynamic;
	static public function arctan(x:Dynamic, out:Dynamic):Dynamic;
	static public function arctan2(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function arctanh(x:Dynamic, out:Dynamic):Dynamic;
	static public function argmax(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function argmin(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function argpartition(a:Dynamic, kth:Dynamic, ?axis:Dynamic, ?kind:Dynamic, ?order:Dynamic = null):Dynamic;
	static public function argsort(a:Dynamic, ?axis:Dynamic, ?kind:Dynamic, ?order:Dynamic = null):Dynamic;
	static public function argwhere(a:Dynamic):Dynamic;
	static public function around(a:Dynamic, ?decimals:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function array(object:Dynamic, ?dtype:Dynamic = null, ?copy:Dynamic = true, ?order:Dynamic = null, ?subok:Dynamic = false, ?ndmin:Dynamic):Dynamic;
	static public function array2string(a:Dynamic, ?max_line_width:Dynamic = null, ?precision:Dynamic = null, ?suppress_small:Dynamic = null, ?separator:Dynamic, ?prefix:Dynamic, ?style:Dynamic = haxe.Constraints.Function, ?formatter:Dynamic = null):Dynamic;
	static public function array_equal(a1:Dynamic, a2:Dynamic):Dynamic;
	static public function array_equiv(a1:Dynamic, a2:Dynamic):Dynamic;
	static public function array_repr(arr:Dynamic, ?max_line_width:Dynamic = null, ?precision:Dynamic = null, ?suppress_small:Dynamic = null):Dynamic;
	static public function array_split(ary:Dynamic, indices_or_sections:Dynamic, ?axis:Dynamic):Void;
	static public function array_str(a:Dynamic, ?max_line_width:Dynamic = null, ?precision:Dynamic = null, ?suppress_small:Dynamic = null):Void;
	static public function asanyarray(a:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic = null):Dynamic;
	static public function asarray(a:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic = null):Dynamic;
	static public function asarray_chkfinite(a:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic = null):Dynamic;
	static public function ascontiguousarray(a:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function asfarray(a:Dynamic, ?dtype:Dynamic):Dynamic;
	static public function asfortranarray(a:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function asmatrix(data:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function asscalar(a:Dynamic):Dynamic;
	static public function atleast_1d(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function atleast_2d(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function atleast_3d(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function average(a:Dynamic, ?axis:Dynamic = null, ?weights:Dynamic = null, ?returned:Dynamic = false):Dynamic;
	static public function bartlett(M:Dynamic):Dynamic;
	static public function base_repr(number:Dynamic, ?base:Dynamic, ?padding:Dynamic):Dynamic;
	static public function binary_repr(num:Dynamic, ?width:Dynamic = null):Dynamic;
	static public function bincount(x:Dynamic, ?weights:Dynamic = null, ?minlength:Dynamic = null):Dynamic;
	static public function bitwise_and(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function bitwise_or(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function bitwise_xor(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function blackman(M:Dynamic):Dynamic;
	static public function bmat(obj:Dynamic, ?ldict:Dynamic = null, ?gdict:Dynamic = null):Dynamic;
	static public function broadcast_arrays(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function broadcast_to(array:Dynamic, shape:Dynamic, ?subok:Dynamic = false):Dynamic;
	static public function busday_count(begindates:Dynamic, enddates:Dynamic, ?weekmask:Dynamic, ?holidays:Dynamic, ?busdaycal:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function busday_offset(dates:Dynamic, offsets:Dynamic, ?roll:Dynamic, ?weekmask:Dynamic, ?holidays:Dynamic = null, ?busdaycal:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function c_(args:haxe.extern.Rest<Dynamic>):Void;
	static public function can_cast(from:Dynamic, totype:Dynamic, ?casting:Dynamic):Dynamic;
	static public function ceil(x:Dynamic, out:Dynamic):Dynamic;
	static public function choose(a:Dynamic, choices:Dynamic, ?out:Dynamic = null, ?mode:Dynamic):Dynamic;
	static public function clip(a:Dynamic, a_min:Dynamic, a_max:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function column_stack(tup:Dynamic):Dynamic;
	static public function common_type(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function compress(condition:Dynamic, a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function concatenate():Dynamic;
	static public function conj(x:Dynamic, out:Dynamic):Dynamic;
	static public function convolve(a:Dynamic, v:Dynamic, ?mode:Dynamic):Dynamic;
	static public function copy(a:Dynamic, ?order:Dynamic):Dynamic;
	static public function copysign(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function copyto(dst:Dynamic, src:Dynamic, ?casting:Dynamic, ?where:Dynamic = null):Void;
	static public function corrcoef(x:Dynamic, ?y:Dynamic = null, ?rowvar:Dynamic, ?bias:Dynamic, ?ddof:Dynamic):Dynamic;
	static public function correlate(a:Dynamic, v:Dynamic, ?mode:Dynamic):Dynamic;
	static public function cos(x:Dynamic, out:Dynamic):Dynamic;
	static public function cosh(x:Dynamic, out:Dynamic):Dynamic;
	static public function count_nonzero(a:Dynamic):Dynamic;
	static public function cov(m:Dynamic, ?y:Dynamic = null, ?rowvar:Dynamic, ?bias:Dynamic, ?ddof:Dynamic = null, ?fweights:Dynamic = null, ?aweights:Dynamic = null):Dynamic;
	static public function cross(a:Dynamic, b:Dynamic, ?axisa:Dynamic, ?axisb:Dynamic, ?axisc:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function cumprod(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function cumsum(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function deg2rad(x:Dynamic, out:Dynamic):Dynamic;
	static public function degrees(x:Dynamic, out:Dynamic):Dynamic;
	static public function delete(arr:Dynamic, obj:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function diag(v:Dynamic, ?k:Dynamic):Dynamic;
	static public function diag_indices(n:Dynamic, ?ndim:Dynamic):Void;
	static public function diag_indices_from(arr:Dynamic):Void;
	static public function diagflat(v:Dynamic, ?k:Dynamic):Dynamic;
	static public function diagonal(a:Dynamic, ?offset:Dynamic, ?axis1:Dynamic, ?axis2:Dynamic):Dynamic;
	static public function diff(a:Dynamic, ?n:Dynamic, ?axis:Dynamic):Dynamic;
	static public function digitize(x:Dynamic, bins:Dynamic, ?right:Dynamic = false):Dynamic;
	static public function divide(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function dot(a:Dynamic, b:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function dsplit(ary:Dynamic, indices_or_sections:Dynamic):Void;
	static public function dstack(tup:Dynamic):Dynamic;
	static public function ediff1d(ary:Dynamic, ?to_end:Dynamic = null, ?to_begin:Dynamic = null):Dynamic;
	static public function einsum(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function empty(shape:Dynamic, ?dtype:Dynamic, ?order:Dynamic):Dynamic;
	static public function empty_like(a:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic, ?subok:Dynamic = true):Dynamic;
	static public function equal(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function exp(x:Dynamic, out:Dynamic):Dynamic;
	static public function exp2(x:Dynamic, out:Dynamic):Dynamic;
	static public function expand_dims(a:Dynamic, axis:Dynamic):Dynamic;
	static public function expm1(x:Dynamic, out:Dynamic):Dynamic;
	static public function extract(condition:Dynamic, arr:Dynamic):Dynamic;
	static public function eye(N:Dynamic, ?M:Dynamic = null, ?k:Dynamic, ?dtype:Dynamic):Dynamic;
	static public function fabs(x:Dynamic, out:Dynamic):Dynamic;
	static public function fill_diagonal(a:Dynamic, val:Dynamic, ?wrap:Dynamic = false):Void;
	static public function find_common_type(array_types:Dynamic, scalar_types:Dynamic):Dynamic;
	static public function fix(x:Dynamic, ?y:Dynamic = null):Dynamic;
	static public function flatnonzero(a:Dynamic):Dynamic;
	static public function fliplr(m:Dynamic):Dynamic;
	static public function flipud(m:Dynamic):Dynamic;
	static public function floor(x:Dynamic, out:Dynamic):Dynamic;
	static public function floor_divide(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function fmax(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function fmin(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function fmod(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function frexp(x:Dynamic, out1:Dynamic, out2:Dynamic):Dynamic;
	static public function frombuffer(buffer:Dynamic, ?dtype:Dynamic, ?count:Dynamic, ?offset:Dynamic):Void;
	static public function fromfile(file:Dynamic, ?dtype:Dynamic, ?count:Dynamic, ?sep:Dynamic):Void;
	static public function fromfunction(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function fromiter(iterable:Dynamic, dtype:Dynamic, ?count:Dynamic):Dynamic;
	static public function frompyfunc(func:Dynamic, nin:Dynamic, nout:Dynamic):Dynamic;
	static public function fromregex(file:Dynamic, regexp:Dynamic, dtype:Dynamic):Dynamic;
	static public function fromstring(string:Dynamic, ?dtype:Dynamic, ?count:Dynamic, ?sep:Dynamic):Dynamic;
	static public function full(shape:Dynamic, fill_value:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic):Dynamic;
	static public function full_like(a:Dynamic, fill_value:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic, ?subok:Dynamic = true):Dynamic;
	static public function fv(rate:Dynamic, nper:Dynamic, pmt:Dynamic, pv:Dynamic, ?when:Dynamic):Dynamic;
	static public function genfromtxt(fname:Dynamic, ?dtype:Dynamic, ?comments:Dynamic, ?delimiter:Dynamic = null, ?skip_header:Dynamic, ?skip_footer:Dynamic, ?converters:Dynamic = null, ?missing_values:Dynamic = null, ?filling_values:Dynamic = null, ?usecols:Dynamic = null, ?names:Dynamic = null, ?excludelist:Dynamic = null, ?deletechars:Dynamic = null, ?replace_space:Dynamic, ?autostrip:Dynamic = false, ?case_sensitive:Dynamic = true, ?defaultfmt:Dynamic, ?unpack:Dynamic = null, ?usemask:Dynamic = false, ?loose:Dynamic = true, ?invalid_raise:Dynamic = true, ?max_rows:Dynamic = null):Dynamic;
	static public function get_printoptions():Dynamic;
	static public function getbufsize():Dynamic;
	static public function geterr():Dynamic;
	static public function geterrcall():Dynamic;
	static public function geterrobj():Dynamic;
	static public function gradient(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function greater(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function greater_equal(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function hamming(M:Dynamic):Dynamic;
	static public function hanning(M:Dynamic):Dynamic;
	static public function histogram(a:Dynamic, ?bins:Dynamic, ?range:Dynamic = null, ?normed:Dynamic = false, ?weights:Dynamic = null, ?density:Dynamic = null):Dynamic;
	static public function histogram2d(x:Dynamic, y:Dynamic, ?bins:Dynamic, ?range:Dynamic = null, ?normed:Dynamic = false, ?weights:Dynamic = null):Dynamic;
	static public function histogramdd(sample:Dynamic, ?bins:Dynamic, ?range:Dynamic = null, ?normed:Dynamic = false, ?weights:Dynamic = null):Dynamic;
	static public function hsplit(ary:Dynamic, indices_or_sections:Dynamic):Void;
	static public function hstack(tup:Dynamic):Dynamic;
	static public function hypot(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function i0(x:Dynamic):Dynamic;
	static public function identity(n:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function imag(val:Dynamic):Dynamic;
	static public function in1d(ar1:Dynamic, ar2:Dynamic, ?assume_unique:Dynamic = false, ?invert:Dynamic = false):Dynamic;
	static public function indices(dimensions:Dynamic, ?dtype:Dynamic):Dynamic;
	static public function info(?object:Dynamic = null, ?maxwidth:Dynamic, ?output:Dynamic, ?toplevel:Dynamic):Void;
	static public function inner(a:Dynamic, b:Dynamic):Dynamic;
	static public function insert(arr:Dynamic, obj:Dynamic, values:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function interp(x:Dynamic, xp:Dynamic, fp:Dynamic, ?left:Dynamic = null, ?right:Dynamic = null, ?period:Dynamic = null):Dynamic;
	static public function intersect1d(ar1:Dynamic, ar2:Dynamic, ?assume_unique:Dynamic = false):Dynamic;
	static public function invert(x:Dynamic, out:Dynamic):Dynamic;
	static public function ipmt(rate:Dynamic, per:Dynamic, nper:Dynamic, pv:Dynamic, ?fv:Dynamic, ?when:Dynamic):Dynamic;
	static public function irr(values:Dynamic):Dynamic;
	static public function is_busday(dates:Dynamic, ?weekmask:Dynamic, ?holidays:Dynamic = null, ?busdaycal:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function isclose(a:Dynamic, b:Dynamic, ?rtol:Dynamic, ?atol:Dynamic, ?equal_nan:Dynamic = false):Dynamic;
	static public function iscomplex(x:Dynamic):Dynamic;
	static public function iscomplexobj(x:Dynamic):Dynamic;
	static public function isfinite(x:Dynamic, out:Dynamic):Dynamic;
	static public function isfortran(a:Dynamic):Void;
	static public function isinf(x:Dynamic, out:Dynamic):Dynamic;
	static public function isnan(x:Dynamic, out:Dynamic):Dynamic;
	static public function isneginf(x:Dynamic, ?y:Dynamic = null):Dynamic;
	static public function isposinf(x:Dynamic, ?y:Dynamic = null):Dynamic;
	static public function isreal(x:Dynamic):Dynamic;
	static public function isrealobj(x:Dynamic):Dynamic;
	static public function isscalar(num:Dynamic):Dynamic;
	static public function issctype(rep:Dynamic):Dynamic;
	static public function issubclass_(arg1:Dynamic, arg2:Dynamic):Dynamic;
	static public function issubdtype(arg1:Dynamic, arg2:Dynamic):Dynamic;
	static public function issubsctype(arg1:Dynamic, arg2:Dynamic):Dynamic;
	static public function ix_(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function kaiser(M:Dynamic, beta:Dynamic):Dynamic;
	static public function kron(a:Dynamic, b:Dynamic):Dynamic;
	static public function ldexp(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function left_shift(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function less(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function less_equal(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function lexsort(keys:Dynamic, ?axis:Dynamic):Dynamic;
	static public function linspace(start:Dynamic, stop:Dynamic, ?num:Dynamic, ?endpoint:Dynamic = true, ?retstep:Dynamic = false, ?dtype:Dynamic = null):Dynamic;
	static public function load(file:Dynamic, ?mmap_mode:Dynamic = null, ?allow_pickle:Dynamic = true, ?fix_imports:Dynamic = true, ?encoding:Dynamic):Dynamic;
	static public function loadtxt(fname:Dynamic, ?dtype:Dynamic, ?comments:Dynamic, ?delimiter:Dynamic = null, ?converters:Dynamic = null, ?skiprows:Dynamic, ?usecols:Dynamic = null, ?unpack:Dynamic = false, ?ndmin:Dynamic):Dynamic;
	static public function log(x:Dynamic, out:Dynamic):Dynamic;
	static public function log10(x:Dynamic, out:Dynamic):Dynamic;
	static public function log1p(x:Dynamic, out:Dynamic):Dynamic;
	static public function log2(x:Dynamic, out:Dynamic):Dynamic;
	static public function logaddexp(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function logaddexp2(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function logical_and(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function logical_not(x:Dynamic, out:Dynamic):Dynamic;
	static public function logical_or(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function logical_xor(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function logspace(start:Dynamic, stop:Dynamic, ?num:Dynamic, ?endpoint:Dynamic = true, ?base:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function lookfor(what:Dynamic, ?module:Dynamic = null, ?import_modules:Dynamic = true, ?regenerate:Dynamic = false, ?output:Dynamic = null):Void;
	static public function mask_indices(n:Dynamic, mask_func:Dynamic, ?k:Dynamic):Dynamic;
	static public function mat(data:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function matmul(a:Dynamic, b:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function maximum(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function mean(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function median(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?overwrite_input:Dynamic = false, ?keepdims:Dynamic = false):Dynamic;
	static public function meshgrid(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function mgrid(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function min_scalar_type(a:Dynamic):Dynamic;
	static public function minimum(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function mintypecode(typechars:Dynamic, ?typeset:Dynamic, ?_default:Dynamic):Dynamic;
	static public function mirr(values:Dynamic, finance_rate:Dynamic, reinvest_rate:Dynamic):Dynamic;
	static public function mod(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function modf(x:Dynamic, out1:Dynamic, out2:Dynamic):Dynamic;
	static public function msort(a:Dynamic):Dynamic;
	static public function multiply(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function nan_to_num(x:Dynamic):Dynamic;
	static public function nanargmax(a:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function nanargmin(a:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function nanmax(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function nanmean(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function nanmedian(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?overwrite_input:Dynamic = false, ?keepdims:Dynamic = false):Dynamic;
	static public function nanmin(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function nanpercentile(a:Dynamic, q:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?overwrite_input:Dynamic = false, ?interpolation:Dynamic, ?keepdims:Dynamic = false):Dynamic;
	static public function nanstd(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?ddof:Dynamic, ?keepdims:Dynamic = false):Dynamic;
	static public function nansum(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic):Dynamic;
	static public function nanvar(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?ddof:Dynamic, ?keepdims:Dynamic = false):Dynamic;
	static public function negative(x:Dynamic, out:Dynamic):Dynamic;
	static public function nonzero(a:Dynamic):Dynamic;
	static public function not_equal(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function nper(rate:Dynamic, pmt:Dynamic, pv:Dynamic, ?fv:Dynamic, ?when:Dynamic):Void;
	static public function npv(rate:Dynamic, values:Dynamic):Dynamic;
	static public function obj2sctype(rep:Dynamic, ?_default:Dynamic = null):Dynamic;
	static public function ogrid(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function ones(shape:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic):Dynamic;
	static public function ones_like(a:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic, ?subok:Dynamic = true):Dynamic;
	static public function outer(a:Dynamic, b:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function packbits(myarray:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function pad(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function partition(a:Dynamic, kth:Dynamic, ?axis:Dynamic, ?kind:Dynamic, ?order:Dynamic = null):Dynamic;
	static public function percentile(a:Dynamic, q:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?overwrite_input:Dynamic = false, ?interpolation:Dynamic, ?keepdims:Dynamic = false):Dynamic;
	static public function piecewise(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function place(arr:Dynamic, mask:Dynamic, vals:Dynamic):Void;
	static public function pmt(rate:Dynamic, nper:Dynamic, pv:Dynamic, ?fv:Dynamic, ?when:Dynamic):Dynamic;
	static public function poly(seq_of_zeros:Dynamic):Dynamic;
	static public function polyadd(a1:Dynamic, a2:Dynamic):Dynamic;
	static public function polyder(p:Dynamic, ?m:Dynamic):Dynamic;
	static public function polydiv(u:Dynamic, v:Dynamic):Dynamic;
	static public function polyfit(x:Dynamic, y:Dynamic, deg:Dynamic, ?rcond:Dynamic = null, ?full:Dynamic = false, ?w:Dynamic = null, ?cov:Dynamic = false):Dynamic;
	static public function polyint(p:Dynamic, ?m:Dynamic, ?k:Dynamic = null):Void;
	static public function polymul(a1:Dynamic, a2:Dynamic):Dynamic;
	static public function polysub(a1:Dynamic, a2:Dynamic):Dynamic;
	static public function polyval(p:Dynamic, x:Dynamic):Dynamic;
	static public function power(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function ppmt(rate:Dynamic, per:Dynamic, nper:Dynamic, pv:Dynamic, ?fv:Dynamic, ?when:Dynamic):Void;
	static public function prod(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function promote_types(type1:Dynamic, type2:Dynamic):Dynamic;
	static public function ptp(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function put(a:Dynamic, ind:Dynamic, v:Dynamic, ?mode:Dynamic):Void;
	static public function putmask(a:Dynamic, mask:Dynamic, values:Dynamic):Void;
	static public function pv(rate:Dynamic, nper:Dynamic, pmt:Dynamic, ?fv:Dynamic, ?when:Dynamic):Dynamic;
	static public function r_(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function rad2deg(x:Dynamic, out:Dynamic):Dynamic;
	static public function radians(x:Dynamic, out:Dynamic):Dynamic;
	static public function rate(nper:Dynamic, pmt:Dynamic, pv:Dynamic, fv:Dynamic, ?when:Dynamic, ?guess:Dynamic, ?tol:Dynamic, ?maxiter:Dynamic):Void;
	static public function ravel(a:Dynamic, ?order:Dynamic):Dynamic;
	static public function ravel_multi_index(multi_index:Dynamic, dims:Dynamic, ?mode:Dynamic, ?order:Dynamic):Dynamic;
	static public function real(val:Dynamic):Dynamic;
	static public function real_if_close(a:Dynamic, ?tol:Dynamic):Dynamic;
	static public function reciprocal(x:Dynamic, out:Dynamic):Dynamic;
	static public function remainder(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function repeat(a:Dynamic, repeats:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function require(a:Dynamic, ?dtype:Dynamic = null, ?requirements:Dynamic = null):Void;
	static public function reshape(a:Dynamic, newshape:Dynamic, ?order:Dynamic):Dynamic;
	static public function resize(a:Dynamic, new_shape:Dynamic):Dynamic;
	static public function restoredot():Void;
	static public function result_type(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function right_shift(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function rint(x:Dynamic, out:Dynamic):Dynamic;
	static public function roll(a:Dynamic, shift:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function rollaxis(a:Dynamic, axis:Dynamic, ?start:Dynamic):Dynamic;
	static public function roots(p:Dynamic):Dynamic;
	static public function rot90(m:Dynamic, ?k:Dynamic):Dynamic;
	static public function round_(a:Dynamic, ?decimals:Dynamic, ?out:Dynamic = null):Void;
	static public function s_(args:haxe.extern.Rest<Dynamic>):Void;
	static public function save(file:Dynamic, arr:Dynamic, ?allow_pickle:Dynamic = true, ?fix_imports:Dynamic = true):Void;
	static public function savetxt(fname:Dynamic, X:Dynamic, ?fmt:Dynamic, ?delimiter:Dynamic, ?newline:Dynamic, ?header:Dynamic, ?footer:Dynamic, ?comments:Dynamic):Void;
	static public function savez(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function savez_compressed(args:haxe.extern.Rest<Dynamic>):Void;
	static public function sctype2char(sctype:Dynamic):Dynamic;
	static public function searchsorted(a:Dynamic, v:Dynamic, ?side:Dynamic, ?sorter:Dynamic = null):Dynamic;
	static public function select(condlist:Dynamic, choicelist:Dynamic, ?_default:Dynamic):Dynamic;
	static public function set_printoptions(?precision:Dynamic = null, ?threshold:Dynamic = null, ?edgeitems:Dynamic = null, ?linewidth:Dynamic = null, ?suppress:Dynamic = null, ?nanstr:Dynamic = null, ?infstr:Dynamic = null, ?formatter:Dynamic = null):Void;
	static public function set_string_function(f:Dynamic, ?repr:Dynamic = true):Void;
	static public function setbufsize(size:Dynamic):Void;
	static public function setdiff1d(ar1:Dynamic, ar2:Dynamic, ?assume_unique:Dynamic = false):Dynamic;
	static public function seterr(?all:Dynamic = null, ?divide:Dynamic = null, ?over:Dynamic = null, ?under:Dynamic = null, ?invalid:Dynamic = null):Dynamic;
	static public function seterrcall(func:Dynamic):Dynamic;
	static public function seterrobj(errobj:Dynamic):Void;
	static public function setxor1d(ar1:Dynamic, ar2:Dynamic, ?assume_unique:Dynamic = false):Dynamic;
	static public function sign(x:Dynamic, out:Dynamic):Dynamic;
	static public function signbit(x:Dynamic, out:Dynamic):Dynamic;
	static public function sin(x:Dynamic, out:Dynamic):Dynamic;
	static public function sinc(x:Dynamic):Dynamic;
	static public function sinh(x:Dynamic, out:Dynamic):Dynamic;
	static public function sort(a:Dynamic, ?axis:Dynamic, ?kind:Dynamic, ?order:Dynamic = null):Dynamic;
	static public function sort_complex(a:Dynamic):Dynamic;
	static public function source(object:Dynamic, ?output:Dynamic):Void;
	static public function split(ary:Dynamic, indices_or_sections:Dynamic, ?axis:Dynamic):Dynamic;
	static public function sqrt(x:Dynamic, out:Dynamic):Dynamic;
	static public function square(x:Dynamic, out:Dynamic):Dynamic;
	static public function squeeze(a:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function stack(arrays:Dynamic, ?axis:Dynamic):Dynamic;
	static public function std(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?ddof:Dynamic, ?keepdims:Dynamic = false):Dynamic;
	static public function subtract(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function sum(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?keepdims:Dynamic = false):Dynamic;
	static public function swapaxes(a:Dynamic, axis1:Dynamic, axis2:Dynamic):Dynamic;
	static public function take(a:Dynamic, indices:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?mode:Dynamic):Dynamic;
	static public function tan(x:Dynamic, out:Dynamic):Dynamic;
	static public function tanh(x:Dynamic, out:Dynamic):Dynamic;
	static public function tensordot(a:Dynamic, b:Dynamic, ?axes:Dynamic):Void;
	static public function tile(A:Dynamic, reps:Dynamic):Dynamic;
	static public function trace(a:Dynamic, ?offset:Dynamic, ?axis1:Dynamic, ?axis2:Dynamic, ?dtype:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function transpose(a:Dynamic, ?axes:Dynamic = null):Dynamic;
	static public function trapz(y:Dynamic, ?x:Dynamic = null, ?dx:Dynamic, ?axis:Dynamic):Dynamic;
	static public function tri(N:Dynamic, ?M:Dynamic = null, ?k:Dynamic, ?dtype:Dynamic):Dynamic;
	static public function tril(m:Dynamic, ?k:Dynamic):Dynamic;
	static public function tril_indices(n:Dynamic, ?k:Dynamic, ?m:Dynamic = null):Dynamic;
	static public function tril_indices_from(arr:Dynamic, ?k:Dynamic):Void;
	static public function trim_zeros(filt:Dynamic, ?trim:Dynamic):Dynamic;
	static public function triu(m:Dynamic, ?k:Dynamic):Void;
	static public function triu_indices(n:Dynamic, ?k:Dynamic, ?m:Dynamic = null):Dynamic;
	static public function triu_indices_from(arr:Dynamic, ?k:Dynamic):Dynamic;
	static public function true_divide(x1:Dynamic, x2:Dynamic, out:Dynamic):Dynamic;
	static public function trunc(x:Dynamic, out:Dynamic):Dynamic;
	static public function typename(char:Dynamic):Dynamic;
	static public function union1d(ar1:Dynamic, ar2:Dynamic):Dynamic;
	static public function unique(ar:Dynamic, ?return_index:Dynamic = false, ?return_inverse:Dynamic = false, ?return_counts:Dynamic = false):Dynamic;
	static public function unpackbits(myarray:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function unravel_index(indices:Dynamic, dims:Dynamic, ?order:Dynamic):Dynamic;
	static public function unwrap(p:Dynamic, ?discont:Dynamic, ?axis:Dynamic):Dynamic;
	static public function vander(x:Dynamic, ?N:Dynamic = null, ?increasing:Dynamic = false):Dynamic;
	@:native("var")
	static public function _var(a:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?ddof:Dynamic, ?keepdims:Dynamic = false):Dynamic;
	static public function vdot(a:Dynamic, b:Dynamic):Dynamic;
	static public function vsplit(ary:Dynamic, indices_or_sections:Dynamic):Void;
	static public function vstack(tup:Dynamic):Dynamic;
	static public function where(condition:Dynamic, x:Dynamic, y:Dynamic):Dynamic;
	static public function zeros(shape:Dynamic, ?dtype:Dynamic, ?order:Dynamic):Dynamic;
	static public function zeros_like(a:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic, ?subok:Dynamic = true):Dynamic;
}