/* This file is generated, do not edit! */
package torch.backends.cudnn;
@:pythonImport("torch.backends.cudnn") extern class Cudnn_Module {
	static public var CUDNN_DATA_DOUBLE : Dynamic;
	static public var CUDNN_DATA_FLOAT : Dynamic;
	static public var CUDNN_DATA_HALF : Dynamic;
	static public var CUDNN_GRU : Dynamic;
	static public var CUDNN_LINEAR_INPUT : Dynamic;
	static public var CUDNN_LSTM : Dynamic;
	static public var CUDNN_RNN_ALGO_PERSIST_DYNAMIC : Dynamic;
	static public var CUDNN_RNN_ALGO_PERSIST_STATIC : Dynamic;
	static public var CUDNN_RNN_ALGO_STANDARD : Dynamic;
	static public var CUDNN_RNN_RELU : Dynamic;
	static public var CUDNN_RNN_TANH : Dynamic;
	static public var CUDNN_SKIP_INPUT : Dynamic;
	static public var CUDNN_TENSOR_NCHW : Dynamic;
	static public var CUDNN_TENSOR_NHWC : Dynamic;
	static public var __builtins__ : Dynamic;
	static public var __cached__ : Dynamic;
	static public var __cudnn_version : Dynamic;
	static public var __doc__ : Dynamic;
	static public var __file__ : Dynamic;
	static public var __loader__ : Dynamic;
	static public var __name__ : Dynamic;
	static public var __package__ : Dynamic;
	static public var __path__ : Dynamic;
	static public var __spec__ : Dynamic;
	static public var _handles : Dynamic;
	static public function _libcudnn():Dynamic;
	static public var _sizeofmap : Dynamic;
	static public var _typemap : Dynamic;
	static public function add_tensor(?args:python.VarArgs<Dynamic>):Dynamic;
	static public var benchmark : Dynamic;
	static public function c_type(tensor:Dynamic):Dynamic;
	static public function check_error(status:Dynamic):Dynamic;
	static public function descriptor(tensor:Dynamic, ?N:Dynamic):Dynamic;
	static public function descriptor_sequence(tensor:Dynamic, batch_sizes:Dynamic):Dynamic;
	static public var enabled : Dynamic;
	static public function get_error_string(status:Dynamic):Dynamic;
	static public function get_handle():Dynamic;
	static public function int_array(itr:Dynamic):Dynamic;
	static public function is_acceptable(tensor:Dynamic):Dynamic;
	static public var lib : Dynamic;
	static public var verbose : Dynamic;
	static public function version():Dynamic;
}