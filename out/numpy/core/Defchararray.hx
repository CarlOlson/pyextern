/* This file is generated, do not edit! */
package numpy.core;
@:native("numpy.core.defchararray") extern class Defchararray {
	static public function add(x1:Dynamic, x2:Dynamic):Dynamic;
	static public function array(obj:Dynamic, ?itemsize:Dynamic = null, ?copy:Dynamic = true, ?unicode:Dynamic = null, ?order:Dynamic = null):Void;
	static public function asarray(obj:Dynamic, ?itemsize:Dynamic = null, ?unicode:Dynamic = null, ?order:Dynamic = null):Void;
	static public function capitalize(a:Dynamic):Dynamic;
	static public function center(a:Dynamic, width:Dynamic, ?fillchar:Dynamic):Dynamic;
	static public function count(a:Dynamic, sub:Dynamic, ?start:Dynamic, ?end:Dynamic = null):Dynamic;
	static public function decode(a:Dynamic, ?encoding:Dynamic = null, ?errors:Dynamic = null):Dynamic;
	static public function encode(a:Dynamic, ?encoding:Dynamic = null, ?errors:Dynamic = null):Dynamic;
	static public function equal(x1:Dynamic, x2:Dynamic):Dynamic;
	static public function find(a:Dynamic, sub:Dynamic, ?start:Dynamic, ?end:Dynamic = null):Dynamic;
	static public function greater(x1:Dynamic, x2:Dynamic):Dynamic;
	static public function greater_equal(x1:Dynamic, x2:Dynamic):Dynamic;
	static public function index(a:Dynamic, sub:Dynamic, ?start:Dynamic, ?end:Dynamic = null):Dynamic;
	static public function isalpha(a:Dynamic):Dynamic;
	static public function isdecimal(a:Dynamic):Dynamic;
	static public function isdigit(a:Dynamic):Dynamic;
	static public function islower(a:Dynamic):Dynamic;
	static public function isnumeric(a:Dynamic):Dynamic;
	static public function isspace(a:Dynamic):Dynamic;
	static public function istitle(a:Dynamic):Dynamic;
	static public function isupper(a:Dynamic):Dynamic;
	static public function join(sep:Dynamic, seq:Dynamic):Dynamic;
	static public function less(x1:Dynamic, x2:Dynamic):Dynamic;
	static public function less_equal(x1:Dynamic, x2:Dynamic):Dynamic;
	static public function ljust(a:Dynamic, width:Dynamic, ?fillchar:Dynamic):Dynamic;
	static public function lower(a:Dynamic):Dynamic;
	static public function lstrip(a:Dynamic, ?chars:Dynamic = null):Dynamic;
	static public function mod(a:Dynamic, values:Dynamic):Dynamic;
	static public function multiply(a:Dynamic, i:Dynamic):Dynamic;
	static public function not_equal(x1:Dynamic, x2:Dynamic):Dynamic;
	static public function partition(a:Dynamic, sep:Dynamic):Dynamic;
	static public function replace(a:Dynamic, old:Dynamic, _new:Dynamic, ?count:Dynamic = null):Dynamic;
	static public function rfind(a:Dynamic, sub:Dynamic, ?start:Dynamic, ?end:Dynamic = null):Dynamic;
	static public function rindex(a:Dynamic, sub:Dynamic, ?start:Dynamic, ?end:Dynamic = null):Dynamic;
	static public function rjust(a:Dynamic, width:Dynamic, ?fillchar:Dynamic):Dynamic;
	static public function rpartition(a:Dynamic, sep:Dynamic):Dynamic;
	static public function rsplit(a:Dynamic, ?sep:Dynamic = null, ?maxsplit:Dynamic = null):Dynamic;
	static public function rstrip(a:Dynamic, ?chars:Dynamic = null):Dynamic;
	static public function split(a:Dynamic, ?sep:Dynamic = null, ?maxsplit:Dynamic = null):Dynamic;
	static public function splitlines(a:Dynamic, ?keepends:Dynamic = null):Dynamic;
	static public function startswith(a:Dynamic, prefix:Dynamic, ?start:Dynamic, ?end:Dynamic = null):Dynamic;
	static public function strip(a:Dynamic, ?chars:Dynamic = null):Dynamic;
	static public function swapcase(a:Dynamic):Dynamic;
	static public function title(a:Dynamic):Dynamic;
	static public function translate(a:Dynamic, table:Dynamic, ?deletechars:Dynamic = null):Dynamic;
	static public function upper(a:Dynamic):Dynamic;
	static public function zfill(a:Dynamic, width:Dynamic):Dynamic;
}