/* This file is generated, do not edit! */
package numpy.random;
@:pythonImport("numpy.random", "RandomState") extern class RandomState {
	public function beta(a:Dynamic, b:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function binomial(n:Dynamic, p:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function bytes(length:Dynamic, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function chisquare(df:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function choice(a:Dynamic, ?size:Dynamic = null, ?replace:Dynamic = true, ?p:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function dirichlet(alpha:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function exponential(?scale:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function f(dfnum:Dynamic, dfden:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function gamma(shape:Dynamic, ?scale:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function geometric(p:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function get_state(?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function gumbel(?loc:Dynamic, ?scale:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function hypergeometric(ngood:Dynamic, nbad:Dynamic, nsample:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function laplace(?loc:Dynamic, ?scale:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function logistic(?loc:Dynamic, ?scale:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function lognormal(?mean:Dynamic, ?sigma:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function logseries(p:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function multinomial(n:Dynamic, pvals:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function multivariate_normal(mean:Dynamic, cov:Dynamic, size:Dynamic, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function negative_binomial(n:Dynamic, p:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function noncentral_chisquare(df:Dynamic, nonc:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function noncentral_f(dfnum:Dynamic, dfden:Dynamic, nonc:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function normal(?loc:Dynamic, ?scale:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function pareto(a:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function permutation(x:Dynamic, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function poisson(?lam:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public var poisson_lam_max : Dynamic;
	public function power(a:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function rand(?varargs:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function randint(low:Dynamic, ?high:Dynamic = null, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function randn(?varargs:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function random_integers(low:Dynamic, ?high:Dynamic = null, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function random_sample(?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function rayleigh(?scale:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function seed(?seed:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function set_state(state:Dynamic, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function shuffle(x:Dynamic, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function standard_cauchy(?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function standard_exponential(?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function standard_gamma(shape:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function standard_normal(?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function standard_t(df:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function tomaxint(?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function triangular(left:Dynamic, mode:Dynamic, right:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function uniform(?low:Dynamic, ?high:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function vonmises(mu:Dynamic, kappa:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function wald(mean:Dynamic, scale:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function weibull(a:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	public function zipf(a:Dynamic, ?size:Dynamic = null, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
}