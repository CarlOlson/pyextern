/* This file is generated, do not edit! */
package numpy;
@:native("numpy.ma") extern class Ma {
	static public function all(self:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null):Void;
	static public function allclose(a:Dynamic, b:Dynamic, ?masked_equal:Dynamic = true, ?rtol:Dynamic, ?atol:Dynamic):Dynamic;
	static public function allequal(a:Dynamic, b:Dynamic, ?fill_value:Dynamic = true):Dynamic;
	static public function anom(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null):Void;
	static public function anomalies(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null):Void;
	static public function any(self:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null):Void;
	static public function append(a:Dynamic, b:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function apply_along_axis(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function arange(start:Dynamic, stop:Dynamic, step:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function argmax(a:Dynamic, ?axis:Dynamic = null, ?fill_value:Dynamic = null):Dynamic;
	static public function argmin(a:Dynamic, ?axis:Dynamic = null, ?fill_value:Dynamic = null):Dynamic;
	static public function argsort(a:Dynamic, ?axis:Dynamic = null, ?kind:Dynamic, ?order:Dynamic = null, ?fill_value:Dynamic = null):Dynamic;
	static public function around(args:haxe.extern.Rest<Dynamic>):Void;
	static public function array(data:Dynamic, ?dtype:Dynamic = null, ?copy:Dynamic = false, ?order:Dynamic = false, ?mask:Dynamic = false, ?fill_value:Dynamic = null, ?keep_mask:Dynamic = true, ?hard_mask:Dynamic = false, ?shrink:Dynamic = true, ?subok:Dynamic = true, ?ndmin:Dynamic):Void;
	static public function asanyarray(a:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function asarray(a:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic = null):Dynamic;
	static public function atleast_1d(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function atleast_2d(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function atleast_3d(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function average(a:Dynamic, ?axis:Dynamic = null, ?weights:Dynamic = null, ?returned:Dynamic = false):Dynamic;
	static public function choose(indices:Dynamic, choices:Dynamic, ?out:Dynamic = null, ?mode:Dynamic):Dynamic;
	static public function clip(a:Dynamic, a_min:Dynamic, a_max:Dynamic, ?out:Dynamic = null):Dynamic;
	static public function clump_masked(a:Dynamic):Dynamic;
	static public function clump_unmasked(a:Dynamic):Dynamic;
	static public function column_stack(tup:Dynamic):Dynamic;
	static public function common_fill_value(a:Dynamic, b:Dynamic):Dynamic;
	static public function compress_cols(a:Dynamic):Void;
	static public function compress_rowcols(x:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function compress_rows(a:Dynamic):Void;
	static public function compressed(x:Dynamic):Void;
	static public function concatenate(arrays:Dynamic, ?axis:Dynamic):Dynamic;
	static public function conjugate(x:Dynamic, out:Dynamic):Dynamic;
	static public function copy(args:haxe.extern.Rest<Dynamic>):Void;
	static public function corrcoef(x:Dynamic, ?y:Dynamic = null, ?rowvar:Dynamic = true, ?bias:Dynamic, ?allow_masked:Dynamic = true, ?ddof:Dynamic):Void;
	static public function count(a:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function count_masked(arr:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function cov(x:Dynamic, ?y:Dynamic = null, ?rowvar:Dynamic = true, ?bias:Dynamic = false, ?allow_masked:Dynamic = true, ?ddof:Dynamic = null):Void;
	static public function cumprod(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function cumsum(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function default_fill_value(obj:Dynamic):Dynamic;
	static public function diag(v:Dynamic, ?k:Dynamic):Void;
	static public function dot(a:Dynamic, b:Dynamic, ?strict:Dynamic = false):Void;
	static public function dstack(tup:Dynamic):Dynamic;
	static public function dump(a:Dynamic, F:Dynamic):Void;
	static public function dumps(a:Dynamic):Void;
	static public function ediff1d(arr:Dynamic, ?to_end:Dynamic = null, ?to_begin:Dynamic = null):Void;
	static public function empty(shape:Dynamic, ?dtype:Dynamic, ?order:Dynamic):Dynamic;
	static public function empty_like(a:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic, ?subok:Dynamic = true):Dynamic;
	static public function expand_dims(x:Dynamic, axis:Dynamic):Void;
	static public function filled(a:Dynamic, ?fill_value:Dynamic = null):Dynamic;
	static public function fix_invalid(a:Dynamic, ?mask:Dynamic = false, ?copy:Dynamic = true, ?fill_value:Dynamic = null):Dynamic;
	static public function flatnotmasked_contiguous(a:Dynamic):Dynamic;
	static public function flatnotmasked_edges(a:Dynamic):Dynamic;
	static public function frombuffer(buffer:Dynamic, ?dtype:Dynamic, ?count:Dynamic, ?offset:Dynamic):Void;
	static public function fromfunction(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public function getdata(a:Dynamic, ?subok:Dynamic = true):Void;
	static public function getmask(a:Dynamic):Void;
	static public function getmaskarray(arr:Dynamic):Void;
	static public function harden_mask(self:Dynamic):Void;
	static public function hsplit(ary:Dynamic, indices_or_sections:Dynamic):Void;
	static public function hstack(tup:Dynamic):Dynamic;
	static public function identity(n:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function indices(dimensions:Dynamic, ?dtype:Dynamic):Dynamic;
	static public function inner(a:Dynamic, b:Dynamic):Dynamic;
	static public function innerproduct(a:Dynamic, b:Dynamic):Dynamic;
	static public function is_mask(m:Dynamic):Dynamic;
	static public function is_masked(x:Dynamic):Dynamic;
	static public function load(F:Dynamic):Void;
	static public function loads(strg:Dynamic):Void;
	static public function make_mask(m:Dynamic, ?copy:Dynamic = false, ?shrink:Dynamic = true, ?dtype:Dynamic):Dynamic;
	static public function make_mask_descr(ndtype:Dynamic):Dynamic;
	static public function make_mask_none(newshape:Dynamic, ?dtype:Dynamic = null):Dynamic;
	static public function mask_cols(a:Dynamic, ?axis:Dynamic = null):Void;
	static public function mask_or(m1:Dynamic, m2:Dynamic, ?copy:Dynamic = false, ?shrink:Dynamic = true):Dynamic;
	static public function mask_rowcols(a:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function mask_rows(a:Dynamic, ?axis:Dynamic = null):Void;
	static public function masked_all(shape:Dynamic, ?dtype:Dynamic):Dynamic;
	static public function masked_all_like(arr:Dynamic):Dynamic;
	public var masked_array : Dynamic;
	static public function masked_equal(x:Dynamic, value:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_greater(x:Dynamic, value:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_greater_equal(x:Dynamic, value:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_inside(x:Dynamic, v1:Dynamic, v2:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_invalid(a:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_less(x:Dynamic, value:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_less_equal(x:Dynamic, value:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_not_equal(x:Dynamic, value:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_object(x:Dynamic, value:Dynamic, ?copy:Dynamic = true, ?shrink:Dynamic = true):Dynamic;
	static public function masked_outside(x:Dynamic, v1:Dynamic, v2:Dynamic, ?copy:Dynamic = true):Void;
	static public function masked_values(x:Dynamic, value:Dynamic, ?rtol:Dynamic, ?atol:Dynamic, ?copy:Dynamic = true, ?shrink:Dynamic = true):Dynamic;
	static public function masked_where(condition:Dynamic, a:Dynamic, ?copy:Dynamic = true):Dynamic;
	public var MaskType : Dynamic;
	static public function max(obj:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?fill_value:Dynamic = null):Dynamic;
	static public function maximum_fill_value(obj:Dynamic):Dynamic;
	static public function mean(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function median(a:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?overwrite_input:Dynamic = false):Dynamic;
	static public function min(obj:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?fill_value:Dynamic = null):Dynamic;
	static public function mr_(args:haxe.extern.Rest<Dynamic>):Void;
	static public function nonzero(self:Dynamic):Dynamic;
	static public function notmasked_contiguous(a:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function notmasked_edges(a:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function ones(shape:Dynamic, ?dtype:Dynamic = null, ?order:Dynamic):Dynamic;
	static public function outer(a:Dynamic, b:Dynamic):Dynamic;
	static public function outerproduct(a:Dynamic, b:Dynamic):Dynamic;
	static public function polyfit(x:Dynamic, y:Dynamic, deg:Dynamic, ?rcond:Dynamic = null, ?full:Dynamic = false, ?w:Dynamic = null, ?cov:Dynamic = false):Dynamic;
	static public function power(a:Dynamic, b:Dynamic, ?third:Dynamic = null):Void;
	static public function prod(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function ptp(obj:Dynamic, ?axis:Dynamic = null, ?out:Dynamic = null, ?fill_value:Dynamic = null):Dynamic;
	static public function ravel(self:Dynamic, ?order:Dynamic):Dynamic;
	static public function reshape(a:Dynamic, new_shape:Dynamic, ?order:Dynamic):Void;
	static public function resize(x:Dynamic, new_shape:Dynamic):Void;
	static public function round(a:Dynamic, ?decimals:Dynamic, ?out:Dynamic = null):Void;
	static public function row_stack(tup:Dynamic):Dynamic;
	static public function set_fill_value(a:Dynamic, fill_value:Dynamic):Dynamic;
	static public function shape(obj:Dynamic):Dynamic;
	static public function size(obj:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function soften_mask(self:Dynamic):Void;
	static public function sort(a:Dynamic, ?axis:Dynamic, ?kind:Dynamic, ?order:Dynamic = null, ?endwith:Dynamic = true, ?fill_value:Dynamic = null):Dynamic;
	static public function squeeze(a:Dynamic, ?axis:Dynamic = null):Dynamic;
	static public function std(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?ddof:Dynamic):Dynamic;
	static public function sum(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null):Dynamic;
	static public function swapaxes(args:haxe.extern.Rest<Dynamic>):Void;
	static public function trace(self:Dynamic, ?offset:Dynamic, ?axis1:Dynamic, ?axis2:Dynamic, ?dtype:Dynamic = null):Void;
	static public function transpose(a:Dynamic, ?axes:Dynamic = null):Void;
	static public function vander(x:Dynamic, ?n:Dynamic = null):Dynamic;
	@:native("var")
	static public function _var(self:Dynamic, ?axis:Dynamic = null, ?dtype:Dynamic = null, ?out:Dynamic = null, ?ddof:Dynamic):Dynamic;
	static public function vstack(tup:Dynamic):Dynamic;
	static public function where(condition:Dynamic, ?x:Dynamic, ?y:Dynamic):Dynamic;
	static public function zeros(shape:Dynamic, ?dtype:Dynamic, ?order:Dynamic):Dynamic;
}